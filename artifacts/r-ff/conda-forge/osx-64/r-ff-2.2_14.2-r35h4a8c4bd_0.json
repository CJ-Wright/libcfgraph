{
 "about": {
  "channels": [
   "conda-forge",
   "defaults"
  ],
  "conda_build_version": "3.19.2",
  "conda_private": false,
  "conda_version": "4.8.3",
  "env_vars": {
   "CIO_TEST": "<not set>"
  },
  "extra": {
   "copy_test_source_files": true,
   "final": true,
   "recipe-maintainers": [
    "conda-forge/r",
    "dpryan79",
    "johanneskoester",
    "bgruening",
    "daler",
    "jdblischak"
   ]
  },
  "home": "http://ff.r-forge.r-project.org/",
  "identifiers": [],
  "keywords": [],
  "license": "GPL-2",
  "license_family": "GPL2",
  "license_file": "/usr/local/miniconda/conda-bld/r-ff_1587191697157/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehol/lib/R/share/licenses/GPL-2",
  "root_pkgs": [
   "bzip2 1.0.8 h0b31af3_2",
   "libcxx 9.0.1 1",
   "zstd 1.4.4 h4b3e974_3",
   "lz4-c 1.9.2 h4a8c4bd_0",
   "conda-env 2.6.0 1",
   "icu 64.2 h6de7cb9_1",
   "conda-forge-ci-setup 2.8.3 py37hc8dfbb8_0",
   "chardet 3.0.4 py37hc8dfbb8_1006",
   "jq 1.6 h1de35cc_1000",
   "libffi 3.2.1 h4a8c4bd_1007",
   "tqdm 4.45.0 pyh9f0ad1d_0",
   "libxml2 2.9.10 h53d96d6_0",
   "anaconda-client 1.7.2 py_0",
   "py-lief 0.9.0 py37h0ceac7d_1",
   "readline 8.0 hcfe32e1_0",
   "ripgrep 12.0.1 h0b31af3_1",
   "click 7.1.1 pyh8c360ce_0",
   "glob2 0.7 py_0",
   "shyaml 0.6.1 py_0",
   "jsonschema 3.2.0 py37hc8dfbb8_1",
   "decorator 4.4.2 py_0",
   "nbformat 5.0.4 py_0",
   "pysocks 1.7.1 py37hc8dfbb8_1",
   "cffi 1.14.0 py37h356ff06_0",
   "importlib_metadata 1.6.0 0",
   "libiconv 1.15 h0b31af3_1006",
   "brotlipy 0.7.0 py37h9bfed18_1000",
   "yaml 0.2.3 h0b31af3_0",
   "python.app 1.3 py37h9bfed18_1",
   "filelock 3.0.10 py_0",
   "pycparser 2.20 py_0",
   "tk 8.6.10 hbbe82c9_0",
   "beautifulsoup4 4.9.0 py37hc8dfbb8_0",
   "urllib3 1.25.9 py_0",
   "markupsafe 1.1.1 py37h9bfed18_1",
   "conda-build 3.19.2 py37hc8dfbb8_0",
   "pyopenssl 19.1.0 py_1",
   "pyrsistent 0.16.0 py37h9bfed18_0",
   "zlib 1.2.11 h0b31af3_1006",
   "jupyter_core 4.6.3 py37hc8dfbb8_1",
   "attrs 19.3.0 py_0",
   "openssl 1.1.1f h0b31af3_0",
   "cryptography 2.8 py37he655712_2",
   "pycosat 0.6.3 py37h9bfed18_1004",
   "libarchive 3.3.3 h02796b4_1008",
   "python_abi 3.7 1_cp37m",
   "ca-certificates 2020.4.5.1 hecc5488_0",
   "psutil 5.7.0 py37h9bfed18_1",
   "setuptools 46.1.3 py37hc8dfbb8_0",
   "idna 2.9 py_1",
   "soupsieve 1.9.4 py37hc8dfbb8_1",
   "pyyaml 5.3.1 py37h9bfed18_0",
   "jinja2 2.11.2 pyh9f0ad1d_0",
   "liblief 0.9.0 h3e78482_1",
   "clyent 1.2.2 py_1",
   "pkginfo 1.5.0.1 py_0",
   "ruamel_yaml 0.15.80 py37h9bfed18_1001",
   "pytz 2019.3 py_0",
   "requests 2.23.0 pyh8c360ce_2",
   "certifi 2020.4.5.1 py37hc8dfbb8_0",
   "zipp 3.1.0 py_0",
   "ncurses 6.1 h0a44026_1002",
   "sqlite 3.30.1 h93121df_0",
   "conda 4.8.3 py37hc8dfbb8_1",
   "ipython_genutils 0.2.0 py_1",
   "lzo 2.10 h1de35cc_1000",
   "oniguruma 6.9.3 h01d97ff_0",
   "six 1.14.0 py_1",
   "python-libarchive-c 2.9 py37_0",
   "xz 5.2.5 h0b31af3_0",
   "python-dateutil 2.8.1 py_0",
   "importlib-metadata 1.6.0 py37hc8dfbb8_0",
   "traitlets 4.3.3 py37hc8dfbb8_1",
   "conda-package-handling 1.6.0 py37h9bfed18_2",
   "python 3.7.6 h90870a6_5_cpython"
  ],
  "summary": "The ff package provides data structures that are stored on disk but behave (almost)\nas if they were in RAM by transparently  mapping only a section (pagesize) in main\nmemory - the effective  virtual memory consumption per ff object. ff supports R''s\nstandard  atomic data types ''double'', ''logical'', ''raw'' and ''integer'' and  non-standard\natomic types boolean (1 bit), quad (2 bit unsigned),  nibble (4 bit unsigned), byte\n(1 byte signed with NAs), ubyte (1 byte  unsigned), short (2 byte signed with NAs),\nushort (2 byte unsigned),  single (4 byte float with NAs). For example ''quad''\nallows efficient  storage of genomic data as an ''A'',''T'',''G'',''C'' factor.\nThe unsigned  types support ''circular'' arithmetic. There is also support for  close-to-atomic\ntypes ''factor'', ''ordered'', ''POSIXct'', ''Date'' and  custom close-to-atomic\ntypes.  ff not only has native C-support for vectors, matrices and arrays  with\nflexible dimorder (major column-order, major row-order and  generalizations for\narrays). There is also a ffdf class not unlike  data.frames and import/export filters\nfor csv files. ff objects store raw data in binary flat files in native encoding,\nand complement this with metadata stored in R as physical and virtual attributes.\nff objects have well-defined hybrid copying semantics,  which gives rise to certain\nperformance improvements through  virtualization. ff objects can be stored and reopened\nacross R  sessions. ff files can be shared by multiple ff R objects  (using different\ndata en/de-coding schemes) in the same process  or from multiple R processes to\nexploit parallelism. A wide choice of  finalizer options allows to work with ''permanent''\nfiles as well as  creating/removing ''temporary'' ff files completely transparent\nto the  user. On certain OS/Filesystem combinations, creating the ff files works\nwithout notable delay thanks to using sparse file allocation. Several access optimization\ntechniques such as Hybrid Index  Preprocessing and Virtualization are implemented\nto achieve good  performance even with large datasets, for example virtual matrix  transpose\nwithout touching a single byte on disk. Further, to reduce  disk I/O, ''logicals''\nand non-standard data types get stored native and  compact on binary flat files\ni.e. logicals take up exactly 2 bits to  represent TRUE, FALSE and NA.  Beyond basic\naccess functions, the ff package also provides  compatibility functions that facilitate\nwriting code for ff and ram  objects and support for batch processing on ff objects\n(e.g. as.ram,  as.ff, ffapply). ff interfaces closely with functionality from package  ''bit'':\nchunked looping, fast bit operations and coercions between  different objects that\ncan store subscript information (''bit'',  ''bitwhich'', ff ''boolean'', ri range\nindex, hi hybrid index). This allows to work interactively with selections of large\ndatasets and quickly  modify selection criteria.  Further high-performance enhancements\ncan be made available upon request.\n",
  "tags": []
 },
 "conda_build_config": {
  "CI": "azure",
  "CONDA_BUILD_SYSROOT": "/Applications/Xcode_11.3.1.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.9.sdk",
  "MACOSX_DEPLOYMENT_TARGET": "10.9",
  "c_compiler": "clang",
  "c_compiler_version": "9",
  "channel_sources": "conda-forge,defaults",
  "channel_targets": "conda-forge main",
  "cpu_optimization_target": "nocona",
  "cran_mirror": "https://cran.r-project.org",
  "cxx_compiler": "clangxx",
  "cxx_compiler_version": "9",
  "extend_keys": [
   "extend_keys",
   "ignore_build_only_deps",
   "ignore_version",
   "pin_run_as_build"
  ],
  "fortran_compiler": "gfortran",
  "ignore_build_only_deps": [
   "python",
   "numpy"
  ],
  "lua": "5",
  "macos_machine": "x86_64-apple-darwin13.4.0",
  "macos_min_version": "10.9",
  "numpy": "1.11",
  "perl": "5.26.0",
  "pin_run_as_build": {
   "python": {
    "max_pin": "x.x",
    "min_pin": "x.x"
   },
   "r-base": {
    "max_pin": "x.x",
    "min_pin": "x.x"
   }
  },
  "python": "3.7",
  "r_base": "3.5.1",
  "target_platform": "osx-64"
 },
 "files": [
  "lib/R/library/ff/DESCRIPTION",
  "lib/R/library/ff/INDEX",
  "lib/R/library/ff/LICENSE",
  "lib/R/library/ff/Meta/Rd.rds",
  "lib/R/library/ff/Meta/features.rds",
  "lib/R/library/ff/Meta/hsearch.rds",
  "lib/R/library/ff/Meta/links.rds",
  "lib/R/library/ff/Meta/nsInfo.rds",
  "lib/R/library/ff/Meta/package.rds",
  "lib/R/library/ff/NAMESPACE",
  "lib/R/library/ff/NEWS",
  "lib/R/library/ff/R/ff",
  "lib/R/library/ff/R/ff.rdb",
  "lib/R/library/ff/R/ff.rdx",
  "lib/R/library/ff/exec/make_rd.pl",
  "lib/R/library/ff/exec/prebuild.sh",
  "lib/R/library/ff/help/AnIndex",
  "lib/R/library/ff/help/aliases.rds",
  "lib/R/library/ff/help/ff.rdb",
  "lib/R/library/ff/help/ff.rdx",
  "lib/R/library/ff/help/paths.rds",
  "lib/R/library/ff/html/00Index.html",
  "lib/R/library/ff/html/R.css",
  "lib/R/library/ff/libs/ff.so"
 ],
 "index": {
  "arch": "x86_64",
  "build": "r35h4a8c4bd_0",
  "build_number": 0,
  "depends": [
   "libcxx >=9.0.1",
   "r-base >=3.5,<3.6.0a0",
   "r-bit >=1.1_12"
  ],
  "license": "GPL-2",
  "license_family": "GPL2",
  "name": "r-ff",
  "platform": "osx",
  "subdir": "osx-64",
  "timestamp": 1587191917436,
  "version": "2.2_14.2"
 },
 "metadata_version": 1,
 "name": "r-ff",
 "raw_recipe": "{% set version = \"2.2-14.2\" %}\n\n{% set posix = 'm2-' if win else '' %}\n{% set native = 'm2w64-' if win else '' %}\n\npackage:\n  name: r-ff\n  version: {{ version|replace(\"-\", \"_\") }}\n\nsource:\n  fn: ff_{{ version }}.tar.gz\n  url:\n    - https://cran.r-project.org/src/contrib/ff_{{ version }}.tar.gz\n    - https://cran.r-project.org/src/contrib/Archive/ff/ff_{{ version }}.tar.gz\n  sha256: f8c06ac333ffe3545cdf56531619865176e1827728f7aeeba82d135d5c5e37e4\n\nbuild:\n  merge_build_host: true  # [win]\n  number: 0\n  skip: true  # [win32]\n\n  rpaths:\n    - lib/R/lib/\n    - lib/\n\nrequirements:\n  build:\n    - posix                # [win]\n    - {{ compiler('c') }}        # [unix]\n    - {{ compiler('m2w64_c') }}  # [win]\n    - {{ compiler('cxx') }}        # [unix]\n    - {{ compiler('m2w64_cxx') }}  # [win]\n  host:\n    - r-base\n    - r-bit >=1.1_12\n\n  run:\n    - r-base\n    - r-bit >=1.1_12\n\ntest:\n  commands:\n    - $R -e \"library('ff')\"  # [not win]\n    - \"\\\"%R%\\\" -e \\\"library('ff')\\\"\"  # [win]\n\nabout:\n  home: http://ff.r-forge.r-project.org/\n  license: GPL-2\n  summary: |\n    The ff package provides data structures that are stored on disk but behave (almost)\n    as if they were in RAM by transparently  mapping only a section (pagesize) in main\n    memory - the effective  virtual memory consumption per ff object. ff supports R''s\n    standard  atomic data types ''double'', ''logical'', ''raw'' and ''integer'' and  non-standard\n    atomic types boolean (1 bit), quad (2 bit unsigned),  nibble (4 bit unsigned), byte\n    (1 byte signed with NAs), ubyte (1 byte  unsigned), short (2 byte signed with NAs),\n    ushort (2 byte unsigned),  single (4 byte float with NAs). For example ''quad''\n    allows efficient  storage of genomic data as an ''A'',''T'',''G'',''C'' factor.\n    The unsigned  types support ''circular'' arithmetic. There is also support for  close-to-atomic\n    types ''factor'', ''ordered'', ''POSIXct'', ''Date'' and  custom close-to-atomic\n    types.  ff not only has native C-support for vectors, matrices and arrays  with\n    flexible dimorder (major column-order, major row-order and  generalizations for\n    arrays). There is also a ffdf class not unlike  data.frames and import/export filters\n    for csv files. ff objects store raw data in binary flat files in native encoding,\n    and complement this with metadata stored in R as physical and virtual attributes.\n    ff objects have well-defined hybrid copying semantics,  which gives rise to certain\n    performance improvements through  virtualization. ff objects can be stored and reopened\n    across R  sessions. ff files can be shared by multiple ff R objects  (using different\n    data en/de-coding schemes) in the same process  or from multiple R processes to\n    exploit parallelism. A wide choice of  finalizer options allows to work with ''permanent''\n    files as well as  creating/removing ''temporary'' ff files completely transparent\n    to the  user. On certain OS/Filesystem combinations, creating the ff files works\n    without notable delay thanks to using sparse file allocation. Several access optimization\n    techniques such as Hybrid Index  Preprocessing and Virtualization are implemented\n    to achieve good  performance even with large datasets, for example virtual matrix  transpose\n    without touching a single byte on disk. Further, to reduce  disk I/O, ''logicals''\n    and non-standard data types get stored native and  compact on binary flat files\n    i.e. logicals take up exactly 2 bits to  represent TRUE, FALSE and NA.  Beyond basic\n    access functions, the ff package also provides  compatibility functions that facilitate\n    writing code for ff and ram  objects and support for batch processing on ff objects\n    (e.g. as.ram,  as.ff, ffapply). ff interfaces closely with functionality from package  ''bit'':\n    chunked looping, fast bit operations and coercions between  different objects that\n    can store subscript information (''bit'',  ''bitwhich'', ff ''boolean'', ri range\n    index, hi hybrid index). This allows to work interactively with selections of large\n    datasets and quickly  modify selection criteria.  Further high-performance enhancements\n    can be made available upon request.\n  license_family: GPL2\n  license_file: {{ environ[\"PREFIX\"] }}/lib/R/share/licenses/GPL-2\n\nextra:\n  recipe-maintainers:\n    - conda-forge/r\n    - dpryan79\n    - johanneskoester\n    - bgruening\n    - daler\n    - jdblischak\n",
 "rendered_recipe": {
  "about": {
   "home": "http://ff.r-forge.r-project.org/",
   "license": "GPL-2",
   "license_family": "GPL2",
   "license_file": "/usr/local/miniconda/conda-bld/r-ff_1587191697157/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehol/lib/R/share/licenses/GPL-2",
   "summary": "The ff package provides data structures that are stored on disk but behave (almost)\nas if they were in RAM by transparently  mapping only a section (pagesize) in main\nmemory - the effective  virtual memory consumption per ff object. ff supports R''s\nstandard  atomic data types ''double'', ''logical'', ''raw'' and ''integer'' and  non-standard\natomic types boolean (1 bit), quad (2 bit unsigned),  nibble (4 bit unsigned), byte\n(1 byte signed with NAs), ubyte (1 byte  unsigned), short (2 byte signed with NAs),\nushort (2 byte unsigned),  single (4 byte float with NAs). For example ''quad''\nallows efficient  storage of genomic data as an ''A'',''T'',''G'',''C'' factor.\nThe unsigned  types support ''circular'' arithmetic. There is also support for  close-to-atomic\ntypes ''factor'', ''ordered'', ''POSIXct'', ''Date'' and  custom close-to-atomic\ntypes.  ff not only has native C-support for vectors, matrices and arrays  with\nflexible dimorder (major column-order, major row-order and  generalizations for\narrays). There is also a ffdf class not unlike  data.frames and import/export filters\nfor csv files. ff objects store raw data in binary flat files in native encoding,\nand complement this with metadata stored in R as physical and virtual attributes.\nff objects have well-defined hybrid copying semantics,  which gives rise to certain\nperformance improvements through  virtualization. ff objects can be stored and reopened\nacross R  sessions. ff files can be shared by multiple ff R objects  (using different\ndata en/de-coding schemes) in the same process  or from multiple R processes to\nexploit parallelism. A wide choice of  finalizer options allows to work with ''permanent''\nfiles as well as  creating/removing ''temporary'' ff files completely transparent\nto the  user. On certain OS/Filesystem combinations, creating the ff files works\nwithout notable delay thanks to using sparse file allocation. Several access optimization\ntechniques such as Hybrid Index  Preprocessing and Virtualization are implemented\nto achieve good  performance even with large datasets, for example virtual matrix  transpose\nwithout touching a single byte on disk. Further, to reduce  disk I/O, ''logicals''\nand non-standard data types get stored native and  compact on binary flat files\ni.e. logicals take up exactly 2 bits to  represent TRUE, FALSE and NA.  Beyond basic\naccess functions, the ff package also provides  compatibility functions that facilitate\nwriting code for ff and ram  objects and support for batch processing on ff objects\n(e.g. as.ram,  as.ff, ffapply). ff interfaces closely with functionality from package  ''bit'':\nchunked looping, fast bit operations and coercions between  different objects that\ncan store subscript information (''bit'',  ''bitwhich'', ff ''boolean'', ri range\nindex, hi hybrid index). This allows to work interactively with selections of large\ndatasets and quickly  modify selection criteria.  Further high-performance enhancements\ncan be made available upon request.\n"
  },
  "build": {
   "number": "0",
   "rpaths": [
    "lib/",
    "lib/R/lib/"
   ],
   "string": "r35h4a8c4bd_0"
  },
  "extra": {
   "copy_test_source_files": true,
   "final": true,
   "recipe-maintainers": [
    "bgruening",
    "conda-forge/r",
    "daler",
    "dpryan79",
    "jdblischak",
    "johanneskoester"
   ]
  },
  "package": {
   "name": "r-ff",
   "version": "2.2_14.2"
  },
  "requirements": {
   "build": [
    "cctools 927.0.2 h5ba7a2e_4",
    "clang 9.0.1 default_hf57f61e_0",
    "clang_osx-64 9.0.1 h05bbb7f_0",
    "clangxx 9.0.1 default_hf57f61e_0",
    "clangxx_osx-64 9.0.1 h05bbb7f_0",
    "compiler-rt 9.0.1 h6a512c6_3",
    "compiler-rt_osx-64 9.0.1 h99342c6_3",
    "ld64 450.3 h3c32e8a_4",
    "libcxx 9.0.1 1",
    "libllvm9 9.0.1 h7475705_1",
    "tapi 1000.10.8 ha1b3eb9_4",
    "zlib 1.2.11 h0b31af3_1006"
   ],
   "host": [
    "_r-mutex 1.0.1 anacondar_1",
    "bwidget 1.9.14 0",
    "bzip2 1.0.8 h0b31af3_2",
    "ca-certificates 2020.4.5.1 hecc5488_0",
    "cairo 1.16.0 hec6a9b0_1003",
    "cctools 927.0.2 h5ba7a2e_4",
    "clang 9.0.1 default_hf57f61e_0",
    "clang_osx-64 9.0.1 h05bbb7f_0",
    "clangxx 9.0.1 default_hf57f61e_0",
    "clangxx_osx-64 9.0.1 h05bbb7f_0",
    "compiler-rt 9.0.1 h6a512c6_3",
    "compiler-rt_osx-64 9.0.1 h99342c6_3",
    "curl 7.68.0 h8754def_0",
    "fontconfig 2.13.1 h6b1039f_1001",
    "freetype 2.10.1 h8da9a1a_0",
    "fribidi 1.0.9 h0b31af3_0",
    "gettext 0.19.8.1 h46ab8bc_1002",
    "gfortran_impl_osx-64 7.3.0 hf4212f2_2",
    "gfortran_osx-64 7.3.0 h22b1bf0_9",
    "glib 2.64.2 h577aef8_0",
    "gmp 6.2.0 h4a8c4bd_2",
    "graphite2 1.3.13 h12caacf_1001",
    "gsl 2.5 ha2d443c_1",
    "harfbuzz 2.4.0 hd8d2a14_3",
    "icu 64.2 h6de7cb9_1",
    "isl 0.19 0",
    "jpeg 9c h1de35cc_1001",
    "krb5 1.16.4 h1752a42_0",
    "ld64 450.3 h3c32e8a_4",
    "libblas 3.8.0 16_openblas",
    "libcblas 3.8.0 16_openblas",
    "libcurl 7.68.0 h709d2b2_0",
    "libcxx 9.0.1 1",
    "libedit 3.1.20170329 hcfe32e1_1001",
    "libffi 3.2.1 h4a8c4bd_1007",
    "libgfortran 4.0.0 2",
    "libiconv 1.15 h0b31af3_1006",
    "libllvm9 9.0.1 h7475705_1",
    "libopenblas 0.3.9 h3d69b6c_0",
    "libpng 1.6.37 hbbe82c9_1",
    "libssh2 1.8.2 hcdc9a53_2",
    "libtiff 4.1.0 h2ae36a8_6",
    "libwebp-base 1.1.0 h0b31af3_3",
    "libxml2 2.9.10 h53d96d6_0",
    "llvm-openmp 10.0.0 h28b9765_0",
    "lz4-c 1.9.2 h4a8c4bd_0",
    "make 4.3 h0b31af3_0",
    "mpc 1.1.0 h4160ff4_1007",
    "mpfr 4.0.2 h65ac59c_1",
    "ncurses 6.1 h0a44026_1002",
    "openssl 1.1.1f h0b31af3_0",
    "pango 1.42.4 haa940fe_4",
    "pcre 8.44 h4a8c4bd_0",
    "pixman 0.38.0 h01d97ff_1003",
    "python 3.8.2 hd5f0129_6_cpython",
    "r-base 3.5.1 hc03ab29_1012",
    "r-bit 1.1_15.2 r35h17f1fa6_0",
    "readline 8.0 hcfe32e1_0",
    "sqlite 3.30.1 h93121df_0",
    "tapi 1000.10.8 ha1b3eb9_4",
    "tk 8.6.10 hbbe82c9_0",
    "tktable 2.10 h008db23_3",
    "xz 5.2.5 h0b31af3_0",
    "zlib 1.2.11 h0b31af3_1006",
    "zstd 1.4.4 h4b3e974_3"
   ],
   "run": [
    "libcxx >=9.0.1",
    "r-base >=3.5,<3.6.0a0",
    "r-bit >=1.1_12"
   ]
  },
  "source": {
   "fn": "ff_2.2-14.2.tar.gz",
   "sha256": "f8c06ac333ffe3545cdf56531619865176e1827728f7aeeba82d135d5c5e37e4",
   "url": [
    "https://cran.r-project.org/src/contrib/Archive/ff/ff_2.2-14.2.tar.gz",
    "https://cran.r-project.org/src/contrib/ff_2.2-14.2.tar.gz"
   ]
  },
  "test": {
   "commands": [
    "$R -e \"library('ff')\""
   ]
  }
 },
 "version": "2.2_14.2"
}