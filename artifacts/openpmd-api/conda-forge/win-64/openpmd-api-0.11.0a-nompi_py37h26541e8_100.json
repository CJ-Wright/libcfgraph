{
 "about": {
  "channels": [
   "conda-forge",
   "defaults"
  ],
  "conda_build_version": "3.18.12",
  "conda_private": false,
  "conda_version": "4.8.2",
  "description": "This library provides a common high-level API for openPMD writing and\nreading. It provides a common interface to I/O libraries and file formats\nsuch as HDF5, ADIOS1, ADIOS2, and JSON.\nLanguage bindings are provided for C++11 (or newer) and Python 3.\nThis conda-forge package provides serial and MPI-parallel I/O. Windows\nsupport is limited to serial versions of HDF5, ADIOS2 and JSON.\n",
  "dev_url": "https://github.com/openPMD/openPMD-api",
  "doc_url": "https://openpmd-api.readthedocs.io",
  "env_vars": {
   "CIO_TEST": "<not set>"
  },
  "extra": {
   "copy_test_source_files": true,
   "final": true,
   "recipe-maintainers": [
    "ax3l",
    "C0nsultant"
   ]
  },
  "home": "https://www.openPMD.org",
  "identifiers": [],
  "keywords": [],
  "license": "LGPL 3",
  "license_family": "LGPL",
  "license_file": "COPYING.LESSER",
  "root_pkgs": [
   "anaconda-client 1.7.2 py_0",
   "asn1crypto 1.3.0 py36_0",
   "attrs 19.3.0 py_0",
   "beautifulsoup4 4.8.2 py36_0",
   "bzip2 1.0.8 hfa6e2cd_2",
   "ca-certificates 2019.11.28 hecc5488_0",
   "certifi 2019.11.28 py36_0",
   "cffi 1.14.0 py36ha419a9e_0",
   "chardet 3.0.4 py36_1003",
   "click 7.0 py_0",
   "clyent 1.2.2 py_1",
   "conda 4.8.2 py36_0",
   "conda-build 3.18.12 py36_0",
   "conda-env 2.6.0 1",
   "conda-forge-ci-setup 2.5.4 py36_0",
   "conda-package-handling 1.6.0 py36h2fa13f4_1",
   "console_shortcut 0.1.1 3",
   "cryptography 2.8 py36hb32ad35_1",
   "decorator 4.4.2 py_0",
   "filelock 3.0.10 py_0",
   "glob2 0.7 py_0",
   "idna 2.9 py_1",
   "importlib_metadata 1.5.0 py36_0",
   "ipython_genutils 0.2.0 py_1",
   "jinja2 2.11.1 py_0",
   "jsonschema 3.2.0 py36_0",
   "jupyter_core 4.6.3 py36_0",
   "libarchive 3.3.3 hd0049e4_1007",
   "libiconv 1.15 hfa6e2cd_1005",
   "liblief 0.9.0 ha925a31_2",
   "libxml2 2.9.10 h9ce36c8_0",
   "lz4-c 1.8.3 he025d50_1001",
   "lzo 2.10 hfa6e2cd_1000",
   "m2w64-gcc-libgfortran 5.3.0 6",
   "m2w64-gcc-libs 5.3.0 7",
   "m2w64-gcc-libs-core 5.3.0 7",
   "m2w64-gmp 6.1.0 2",
   "m2w64-libwinpthread-git 5.0.0.4634.697f757 2",
   "markupsafe 1.1.1 py36hfa6e2cd_0",
   "menuinst 1.4.16 py36_0",
   "msys2-conda-epoch 20160418 1",
   "nbformat 5.0.4 py_0",
   "openssl 1.1.1d hfa6e2cd_0",
   "pip 20.0.2 py_2",
   "pkginfo 1.5.0.1 py_0",
   "powershell_shortcut 0.0.1 2",
   "psutil 5.7.0 py36hfa6e2cd_0",
   "py-lief 0.9.0 py36ha925a31_2",
   "pycosat 0.6.3 py36hfa6e2cd_1002",
   "pycparser 2.20 py_0",
   "pyopenssl 19.1.0 py_1",
   "pyrsistent 0.15.7 py36hfa6e2cd_0",
   "pysocks 1.7.1 py36_0",
   "python 3.6.10 he025d50_1009_cpython",
   "python-dateutil 2.8.1 py_0",
   "python-libarchive-c 2.9 py36_0",
   "pytz 2019.3 py_0",
   "pywin32 227 py36hfa6e2cd_0",
   "pyyaml 5.1.2 py36hfa6e2cd_0",
   "requests 2.23.0 py36_0",
   "ripgrep 11.0.2 h301d43c_3",
   "ruamel_yaml 0.15.71 py36hfa6e2cd_1000",
   "setuptools 45.2.0 py36_0",
   "six 1.14.0 py36_0",
   "soupsieve 1.9.4 py36_0",
   "sqlite 3.27.2 he774522_0",
   "tqdm 4.43.0 py_0",
   "traitlets 4.3.3 py36_0",
   "urllib3 1.25.7 py36_0",
   "vc 14.1 h0510ff6_4",
   "vs2008_express_vc_python_patch 1.0.0 0",
   "vs2015_runtime 14.15.26706 h3a45250_0",
   "wheel 0.34.2 py_1",
   "wincertstore 0.2 py36_1003",
   "win_inet_pton 1.1.0 py36_0",
   "xz 5.2.4 h2fa13f4_1001",
   "yaml 0.1.7 hc54c509_2",
   "zipp 3.1.0 py_0",
   "zlib 1.2.11 h2fa13f4_1006",
   "zstd 1.4.4 hd8a0e53_1"
  ],
  "summary": "C++ & Python API for writing & reading (.h5, .bp, .json, ...), serial & MPI parallel openPMD files.",
  "tags": []
 },
 "conda_build_config": {
  "CI": "azure",
  "VERBOSE_CM": "VERBOSE=1",
  "c_compiler": "vs2015",
  "channel_sources": "conda-forge,defaults",
  "channel_targets": "conda-forge main",
  "cpu_optimization_target": "nocona",
  "cran_mirror": "https://cran.r-project.org",
  "cxx_compiler": "vs2015",
  "extend_keys": [
   "ignore_version",
   "extend_keys",
   "ignore_build_only_deps",
   "pin_run_as_build"
  ],
  "fortran_compiler": "gfortran",
  "ignore_build_only_deps": [
   "numpy",
   "python"
  ],
  "lua": "5",
  "mpi": "nompi",
  "numpy": "1.11",
  "perl": "5.26.0",
  "pin_run_as_build": {
   "mpich": "x.x",
   "openmpi": "x.x",
   "python": {
    "max_pin": "x.x",
    "min_pin": "x.x"
   },
   "r-base": {
    "max_pin": "x.x",
    "min_pin": "x.x"
   }
  },
  "python": "3.7",
  "r_base": "3.4",
  "target_platform": "win-64",
  "vc": "14",
  "zip_keys": [
   [
    "python",
    "c_compiler",
    "cxx_compiler"
   ]
  ]
 },
 "files": [
  "Lib/site-packages/openpmd_api.cp37-win_amd64.pyd",
  "Library/bin/openPMD.dll",
  "Library/bin/openpmd-ls.exe",
  "Library/cmake/Modules/FindADIOS.cmake",
  "Library/cmake/openPMDConfig.cmake",
  "Library/cmake/openPMDConfigVersion.cmake",
  "Library/cmake/openPMDTargets-release.cmake",
  "Library/cmake/openPMDTargets.cmake",
  "Library/include/mpark/variant.hpp",
  "Library/include/openPMD/Dataset.hpp",
  "Library/include/openPMD/Datatype.hpp",
  "Library/include/openPMD/IO/ADIOS/ADIOS1Auxiliary.hpp",
  "Library/include/openPMD/IO/ADIOS/ADIOS1FilePosition.hpp",
  "Library/include/openPMD/IO/ADIOS/ADIOS1IOHandler.hpp",
  "Library/include/openPMD/IO/ADIOS/ADIOS1IOHandlerImpl.hpp",
  "Library/include/openPMD/IO/ADIOS/ADIOS2Auxiliary.hpp",
  "Library/include/openPMD/IO/ADIOS/ADIOS2FilePosition.hpp",
  "Library/include/openPMD/IO/ADIOS/ADIOS2IOHandler.hpp",
  "Library/include/openPMD/IO/ADIOS/ParallelADIOS1IOHandler.hpp",
  "Library/include/openPMD/IO/ADIOS/ParallelADIOS1IOHandlerImpl.hpp",
  "Library/include/openPMD/IO/AbstractFilePosition.hpp",
  "Library/include/openPMD/IO/AbstractIOHandler.hpp",
  "Library/include/openPMD/IO/AbstractIOHandlerHelper.hpp",
  "Library/include/openPMD/IO/AbstractIOHandlerImpl.hpp",
  "Library/include/openPMD/IO/AbstractIOHandlerImplCommon.hpp",
  "Library/include/openPMD/IO/AccessType.hpp",
  "Library/include/openPMD/IO/DummyIOHandler.hpp",
  "Library/include/openPMD/IO/Format.hpp",
  "Library/include/openPMD/IO/HDF5/HDF5Auxiliary.hpp",
  "Library/include/openPMD/IO/HDF5/HDF5FilePosition.hpp",
  "Library/include/openPMD/IO/HDF5/HDF5IOHandler.hpp",
  "Library/include/openPMD/IO/HDF5/HDF5IOHandlerImpl.hpp",
  "Library/include/openPMD/IO/HDF5/ParallelHDF5IOHandler.hpp",
  "Library/include/openPMD/IO/HDF5/ParallelHDF5IOHandlerImpl.hpp",
  "Library/include/openPMD/IO/IOTask.hpp",
  "Library/include/openPMD/IO/InvalidatableFile.hpp",
  "Library/include/openPMD/IO/JSON/JSONFilePosition.hpp",
  "Library/include/openPMD/IO/JSON/JSONIOHandler.hpp",
  "Library/include/openPMD/IO/JSON/JSONIOHandlerImpl.hpp",
  "Library/include/openPMD/Iteration.hpp",
  "Library/include/openPMD/IterationEncoding.hpp",
  "Library/include/openPMD/Mesh.hpp",
  "Library/include/openPMD/ParticlePatches.hpp",
  "Library/include/openPMD/ParticleSpecies.hpp",
  "Library/include/openPMD/Record.hpp",
  "Library/include/openPMD/RecordComponent.hpp",
  "Library/include/openPMD/Series.hpp",
  "Library/include/openPMD/UnitDimension.hpp",
  "Library/include/openPMD/auxiliary/Date.hpp",
  "Library/include/openPMD/auxiliary/Deprecated.hpp",
  "Library/include/openPMD/auxiliary/Environment.hpp",
  "Library/include/openPMD/auxiliary/Filesystem.hpp",
  "Library/include/openPMD/auxiliary/Memory.hpp",
  "Library/include/openPMD/auxiliary/OutOfRangeMsg.hpp",
  "Library/include/openPMD/auxiliary/ShareRaw.hpp",
  "Library/include/openPMD/auxiliary/StringManip.hpp",
  "Library/include/openPMD/auxiliary/Variant.hpp",
  "Library/include/openPMD/backend/Attributable.hpp",
  "Library/include/openPMD/backend/Attribute.hpp",
  "Library/include/openPMD/backend/BaseRecord.hpp",
  "Library/include/openPMD/backend/BaseRecordComponent.hpp",
  "Library/include/openPMD/backend/Container.hpp",
  "Library/include/openPMD/backend/MeshRecordComponent.hpp",
  "Library/include/openPMD/backend/PatchRecord.hpp",
  "Library/include/openPMD/backend/PatchRecordComponent.hpp",
  "Library/include/openPMD/backend/Writable.hpp",
  "Library/include/openPMD/benchmark/mpi/BlockSlicer.hpp",
  "Library/include/openPMD/benchmark/mpi/DatasetFiller.hpp",
  "Library/include/openPMD/benchmark/mpi/MPIBenchmark.hpp",
  "Library/include/openPMD/benchmark/mpi/MPIBenchmarkReport.hpp",
  "Library/include/openPMD/benchmark/mpi/OneDimensionalBlockSlicer.hpp",
  "Library/include/openPMD/benchmark/mpi/RandomDatasetFiller.hpp",
  "Library/include/openPMD/binding/python/Numpy.hpp",
  "Library/include/openPMD/config.hpp",
  "Library/include/openPMD/helper/list_series.hpp",
  "Library/include/openPMD/openPMD.hpp",
  "Library/include/openPMD/version.hpp",
  "Library/lib/openPMD.lib",
  "Library/lib/pkgconfig/openPMD.pc"
 ],
 "index": {
  "arch": "x86_64",
  "build": "nompi_py37h26541e8_100",
  "build_number": 100,
  "depends": [
   "adios2 * nompi_*",
   "adios2 >=2.5,<2.6.0a0",
   "blosc",
   "bzip2",
   "hdf5 >=1.10.6,<1.10.7.0a0",
   "numpy >=1.15.0",
   "python >=3.7,<3.8.0a0",
   "python_abi 3.7.* *_cp37m",
   "vc >=14,<15.0a0",
   "zlib"
  ],
  "license": "LGPL 3",
  "license_family": "LGPL",
  "name": "openpmd-api",
  "platform": "win",
  "subdir": "win-64",
  "timestamp": 1583482196035,
  "version": "0.11.0a"
 },
 "metadata_version": 1,
 "name": "openpmd-api",
 "raw_recipe": "{% set name = \"openpmd-api\" %}\n{% set version = \"0.11.0a\" %}\n{% set build = 0 %}\n{% set version_fn = version.replace(\"a\", \"-alpha\") %}\n{% set sha256 = \"102a317024bb1abc28ec9feda96c44165de1d90a82a3aecae9fcaf72991cdb88\" %}\n\n# ensure mpi is defined (needed for conda-smithy recipe-lint)\n{% set mpi = mpi or 'nompi' %}\n\n# prioritize nompi variant via build number\n{% if mpi == 'nompi' %}\n{% set build = build + 100 %}\n{% endif %}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  fn: {{ version_fn }}.tar.gz\n  url: https://github.com/openPMD/openPMD-api/archive/{{ version_fn }}.tar.gz\n  sha256: {{ sha256 }}\n\nbuild:\n  number: {{ build }}\n  skip: True  # [py27]\n\n  # add build string so packages can depend on\n  # mpi or nompi variants\n  # dependencies:\n  # `pkg * mpi_mpich_*` for mpich\n  # `pkg * mpi_*` for any mpi\n  # `pkg * nompi_*` for no mpi\n  {% if mpi == 'nompi' %}\n  {% set mpi_prefix = \"nompi\" %}\n  {% else %}\n  {% set mpi_prefix = \"mpi_\" + mpi %}\n  {% endif %}\n  string: \"{{ mpi_prefix }}_py{{ py }}h{{ PKG_HASH }}_{{ build }}\"\n\n  run_exports:\n    # strict runtime dependency on build-time MPI flavor\n    - {{ name }} * {{ mpi_prefix }}_* \n    # patch-releases are not (yet) ABI compatible:\n    #   https://docs.conda.io/projects/conda-build/en/latest/resources/variants.html#referencing-subpackages\n    #   https://abi-laboratory.pro/?view=timeline&l=adios2\n    #   https://abi-laboratory.pro/?view=timeline&l=openpmd-api\n    - {{ pin_compatible('adios2', min_pin='x.x.x', max_pin='x.x.x') }}\n    - {{ pin_subpackage('openpmd-api', min_pin='x.x.x', max_pin='x.x.x') }}\n\nrequirements:\n  build:\n    - {{ compiler('c') }}\n    - {{ compiler('cxx') }}\n    # FIXME: pulled in by ADIOS2, see https://github.com/ornladios/ADIOS2/issues/1885\n    - {{ compiler('fortran') }}  # [linux]\n    - make  # [unix]\n    - cmake >=3.11\n  host:\n    - {{ mpi }}  # [mpi != 'nompi'] \n    - python\n    - pybind11 >=2.3.0\n    # need to list hdf5|adios|adios2 twice to get version pinning from\n    # conda_build_config and build pinning from {{ mpi_prefix }}\n    - adios  >=1.13.1                    # [unix]\n    - adios2 >=2.4.0\n    - hdf5   >=1.8.13\n    - adios  >=1.13.1 = mpi_{{ mpi }}_*  # [unix and mpi != 'nompi']\n    - adios2 >=2.4.0  = mpi_{{ mpi }}_*  # [mpi != 'nompi']\n    - hdf5   >=1.8.13 = mpi_{{ mpi }}_*  # [mpi != 'nompi']\n  run:\n    - {{ mpi }}  # [mpi != 'nompi']\n    - mpi4py     # [mpi != 'nompi']\n    - python\n    - numpy >=1.15.0\n    # FIXME: for some reason warnings about this (ADIOS1 deps)\n    - blosc\n    - zlib\n    - bzip2\n\ntest:\n  imports:\n    - openpmd_api\n  commands:\n    - python -c \"import openpmd_api; print(openpmd_api.__version__);\"\n    - python -c \"import openpmd_api; print(openpmd_api.variants)\"\n    - test -f ${PREFIX}/lib/cmake/openPMD/openPMDConfig.cmake                     # [unix]\n    - test -f ${PREFIX}/lib/libopenPMD.so                                         # [linux]\n    - otool -L ${PREFIX}/lib/libopenPMD.dylib                                     # [osx]\n    - if exist %LIBRARY_PREFIX%\\bin\\openPMD.dll (exit 0) else (exit 1)            # [win]\n    - otool -L ${PREFIX}/lib/libopenPMD.ADIOS1.Serial.dylib                       # [osx and mpi != 'mpich']\n    - ldd ${PREFIX}/lib/libopenPMD.ADIOS1.Serial.so                               # [linux]\n    - if exist %LIBRARY_PREFIX%\\cmake\\openPMDConfig.cmake (exit 0) else (exit 1)  # [win]\n\nabout:\n  home: https://www.openPMD.org\n  license: LGPL 3\n  license_family: LGPL\n  license_file: COPYING.LESSER\n  summary: 'C++ & Python API for writing & reading (.h5, .bp, .json, ...), serial & MPI parallel openPMD files.'\n\n  description: |\n    This library provides a common high-level API for openPMD writing and\n    reading. It provides a common interface to I/O libraries and file formats\n    such as HDF5, ADIOS1, ADIOS2, and JSON.\n    Language bindings are provided for C++11 (or newer) and Python 3.\n    This conda-forge package provides serial and MPI-parallel I/O. Windows\n    support is limited to serial versions of HDF5, ADIOS2 and JSON.\n  doc_url: https://openpmd-api.readthedocs.io\n  dev_url: https://github.com/openPMD/openPMD-api\n\nextra:\n  recipe-maintainers:\n    - ax3l\n    - C0nsultant\n",
 "rendered_recipe": {
  "about": {
   "description": "This library provides a common high-level API for openPMD writing and\nreading. It provides a common interface to I/O libraries and file formats\nsuch as HDF5, ADIOS1, ADIOS2, and JSON.\nLanguage bindings are provided for C++11 (or newer) and Python 3.\nThis conda-forge package provides serial and MPI-parallel I/O. Windows\nsupport is limited to serial versions of HDF5, ADIOS2 and JSON.\n",
   "dev_url": "https://github.com/openPMD/openPMD-api",
   "doc_url": "https://openpmd-api.readthedocs.io",
   "home": "https://www.openPMD.org",
   "license": "LGPL 3",
   "license_family": "LGPL",
   "license_file": "COPYING.LESSER",
   "summary": "C++ & Python API for writing & reading (.h5, .bp, .json, ...), serial & MPI parallel openPMD files."
  },
  "build": {
   "number": "100",
   "run_exports": [
    "adios2 >=2.5.0,<2.5.1.0a0",
    "openpmd-api * nompi_*",
    "openpmd-api >=0.11.0,<0.11.1a"
   ],
   "string": "nompi_py37h26541e8_100"
  },
  "extra": {
   "copy_test_source_files": true,
   "final": true,
   "recipe-maintainers": [
    "C0nsultant",
    "ax3l"
   ]
  },
  "package": {
   "name": "openpmd-api",
   "version": "0.11.0a"
  },
  "requirements": {
   "build": [
    "cmake 3.16.4 he025d50_0",
    "vs2015_runtime 14.16.27012 hf0eaf9b_1",
    "vs2015_win-64 14.0.25420 h55c1224_11"
   ],
   "host": [
    "adios2 2.5.0 nompi_py37h56e4932_100",
    "blosc 1.17.1 h6538335_0",
    "bzip2 1.0.8 hfa6e2cd_2",
    "ca-certificates 2019.11.28 hecc5488_0",
    "hdf5 1.10.6 nompi_ha405e13_100",
    "intel-openmp 2020.0 166",
    "libblas 3.8.0 15_mkl",
    "libcblas 3.8.0 15_mkl",
    "libffi 3.2.1 h6538335_1006",
    "liblapack 3.8.0 15_mkl",
    "libpng 1.6.37 h7602738_0",
    "m2w64-gcc-libgfortran 5.3.0 6",
    "m2w64-gcc-libs 5.3.0 7",
    "m2w64-gcc-libs-core 5.3.0 7",
    "m2w64-gmp 6.1.0 2",
    "m2w64-libwinpthread-git 5.0.0.4634.697f757 2",
    "mkl 2020.0 166",
    "msys2-conda-epoch 20160418 1",
    "numpy 1.18.1 py37hc71023c_0",
    "openssl 1.1.1d hfa6e2cd_0",
    "pybind11 2.4.3 py37he980bc4_1",
    "python 3.7.6 h5b45d93_4_cpython",
    "python_abi 3.7 1_cp37m",
    "sqlite 3.30.1 hfa6e2cd_0",
    "vc 14.1 h0510ff6_4",
    "vs2015_runtime 14.16.27012 hf0eaf9b_1",
    "zlib 1.2.11 h2fa13f4_1006"
   ],
   "run": [
    "adios2 * nompi_*",
    "adios2 >=2.5,<2.6.0a0",
    "blosc",
    "bzip2",
    "hdf5 >=1.10.6,<1.10.7.0a0",
    "numpy >=1.15.0",
    "python >=3.7,<3.8.0a0",
    "python_abi 3.7.* *_cp37m",
    "vc >=14,<15.0a0",
    "zlib"
   ]
  },
  "source": {
   "fn": "0.11.0-alpha.tar.gz",
   "sha256": "102a317024bb1abc28ec9feda96c44165de1d90a82a3aecae9fcaf72991cdb88",
   "url": "https://github.com/openPMD/openPMD-api/archive/0.11.0-alpha.tar.gz"
  },
  "test": {
   "commands": [
    "python -c \"import openpmd_api; print(openpmd_api.__version__);\"",
    "python -c \"import openpmd_api; print(openpmd_api.variants)\"",
    "if exist %LIBRARY_PREFIX%\\bin\\openPMD.dll (exit 0) else (exit 1)",
    "if exist %LIBRARY_PREFIX%\\cmake\\openPMDConfig.cmake (exit 0) else (exit 1)"
   ],
   "imports": [
    "openpmd_api"
   ]
  }
 },
 "version": "0.11.0a"
}