{
 "about": {
  "channels": [
   "conda-forge",
   "defaults"
  ],
  "conda_build_version": "3.17.8",
  "conda_private": false,
  "conda_version": "4.6.7",
  "description": "Go is expressive, concise, clean, and efficient. Its concurrency mechanisms\nmake it easy to write programs that get the most out of multicore and\nnetworked machines, while its novel type system enables flexible and\nmodular program construction. Go compiles quickly to machine code yet has\nthe convenience of garbage collection and the power of run-time reflection.\nIt's a fast, statically typed, compiled language that feels like a\ndynamically typed, interpreted language.\n",
  "dev_url": "https://go.googlesource.com/go",
  "doc_url": "https://golang.org/doc",
  "env_vars": {
   "CIO_TEST": "<not set>"
  },
  "extra": {
   "copy_test_source_files": true,
   "final": true,
   "recipe-maintainers": [
    "nehaljwani",
    "scopatz",
    "sodre"
   ]
  },
  "home": "http://golang.org",
  "identifiers": [],
  "keywords": [],
  "license": "BSD-Style",
  "license_family": "BSD",
  "license_file": "go/LICENSE",
  "root_pkgs": [
   "filelock 3.0.10 py_0",
   "beautifulsoup4 4.7.1 py37_1001",
   "python 3.7.1 h381d211_1002",
   "liblief 0.9.0 h7725739_2",
   "lzo 2.10 h14c3975_1000",
   "soupsieve 1.8 py37_0",
   "pycosat 0.6.3 py37h14c3975_1001",
   "conda-build 3.17.8 py37_0",
   "conda 4.6.7 py37_0",
   "git 2.21.0 pl526h2882143_0",
   "patchelf 0.9 hf484d3e_1003",
   "traitlets 4.3.2 py37_1000",
   "readline 7.0 hf8c457e_1001",
   "cffi 1.12.2 py37h9745a5d_0",
   "attrs 19.1.0 py_0",
   "expat 2.2.5 hf484d3e_1002",
   "pytz 2018.9 py_0",
   "anaconda-client 1.7.2 py_0",
   "gettext 0.19.8.1 h9745a5d_1001",
   "requests 2.21.0 py37_1000",
   "markupsafe 1.1.1 py37h14c3975_0",
   "urllib3 1.24.1 py37_1000",
   "sqlite 3.26.0 h67949de_1000",
   "openssl 1.1.1b h14c3975_0",
   "libedit 3.1.20170329 hf8c457e_1001",
   "pkginfo 1.5.0.1 py_0",
   "python-dateutil 2.8.0 py_0",
   "setuptools 40.8.0 py37_0",
   "idna 2.8 py37_1000",
   "libgcc-ng 7.3.0 hdf63c60_0",
   "decorator 4.3.2 py_0",
   "zstd 1.3.3 1",
   "pip 19.0.3 py37_0",
   "yaml 0.1.7 h14c3975_1001",
   "libcurl 7.64.0 h541490c_2",
   "pycparser 2.19 py_0",
   "krb5 1.16.3 h05b26f9_1001",
   "ca-certificates 2018.11.29 ha4d7672_0",
   "curl 7.64.0 h646f8bb_2",
   "py-lief 0.9.0 py37h7725739_2",
   "wheel 0.33.1 py37_0",
   "icu 58.2 hf484d3e_1000",
   "tk 8.6.9 h84994c4_1000",
   "lz4-c 1.8.1.2 0",
   "tini 0.18.0 h14c3975_1001",
   "libarchive 3.3.3 he5c8681_1003",
   "jsonschema 3.0.1 py37_0",
   "tqdm 4.31.1 py_0",
   "glob2 0.6 py_0",
   "libstdcxx-ng 7.3.0 hdf63c60_0",
   "certifi 2018.11.29 py37_1000",
   "jinja2 2.10 py_1",
   "nbformat 4.4.0 py_1",
   "conda-env 2.6.0 1",
   "asn1crypto 0.24.0 py37_1003",
   "cryptography 2.5 py37h9d9f1b6_1",
   "perl 5.26.2 h14c3975_1002",
   "bzip2 1.0.6 h14c3975_1002",
   "libiconv 1.15 h14c3975_1004",
   "pyrsistent 0.14.11 py37h14c3975_0",
   "ipython_genutils 0.2.0 py_1",
   "six 1.12.0 py37_1000",
   "python-libarchive-c 2.8 py37_1004",
   "ncurses 6.1 hf484d3e_1002",
   "jupyter_core 4.4.0 py_0",
   "xz 5.2.4 h14c3975_1001",
   "psutil 5.5.1 py37h14c3975_0",
   "libffi 3.2.1 hf484d3e_1005",
   "ruamel_yaml 0.15.71 py37h14c3975_1000",
   "pyyaml 3.13 py37h14c3975_1001",
   "libssh2 1.8.0 h90d6eec_1004",
   "chardet 3.0.4 py37_1003",
   "pyopenssl 19.0.0 py37_0",
   "libxml2 2.9.8 h143f9aa_1005",
   "gosu 1.10 h81701ea_1001",
   "pysocks 1.6.8 py37_1002",
   "clyent 1.2.2 py_1",
   "zlib 1.2.11 h14c3975_1004",
   "conda-forge-ci-setup 2.1.7 py37_0",
   "click 7.0 py_0"
  ],
  "summary": "The Go Programming Language",
  "tags": []
 },
 "conda_build_config": {
  "c_compiler": "gcc",
  "cgo": "false",
  "cgo_enabled": "0",
  "cgo_var": "nocgo",
  "channel_sources": "conda-forge,defaults",
  "channel_targets": "conda-forge main",
  "conda_goarch": "amd64",
  "conda_gofile": "Mach-O",
  "conda_goos": "darwin",
  "conda_goplatform": "osx-64",
  "cpu_optimization_target": "nocona",
  "cran_mirror": "https://cran.r-project.org",
  "cxx_compiler": "gxx",
  "docker_image": "condaforge/linux-anvil-comp7",
  "extend_keys": [
   "extend_keys",
   "pin_run_as_build",
   "ignore_version",
   "ignore_build_only_deps"
  ],
  "fortran_compiler": "gfortran",
  "go14_compiler": "go1.4-bootstrap",
  "ignore_build_only_deps": [
   "python",
   "numpy"
  ],
  "lua": "5",
  "nocgo": "true",
  "numpy": "1.11",
  "perl": "5.26",
  "pin_run_as_build": {
   "perl": {
    "max_pin": "x.x.x"
   },
   "python": {
    "max_pin": "x.x",
    "min_pin": "x.x"
   },
   "r-base": {
    "max_pin": "x.x.x",
    "min_pin": "x.x.x"
   }
  },
  "python": "3.7",
  "r_base": "3.5",
  "target_platform": "linux-64",
  "zip_keys": [
   [
    "conda_goplatform",
    "conda_goos",
    "conda_gofile"
   ],
   [
    "cgo",
    "nocgo",
    "cgo_var",
    "cgo_enabled"
   ]
  ]
 },
 "files": [],
 "index": {
  "arch": "x86_64",
  "build": "hb30d042_0",
  "build_number": 0,
  "depends": [
   "go-nocgo_linux-64 1.10.2 h03773dc_0"
  ],
  "license": "BSD-Style",
  "license_family": "BSD",
  "name": "go",
  "platform": "linux",
  "subdir": "linux-64",
  "timestamp": 1551789830932,
  "version": "1.10.2"
 },
 "metadata_version": 1,
 "name": "go",
 "raw_recipe": "{% set name = \"go\" %}\n{% set version = \"1.10.2\" %}\n\npackage:\n  name: {{ name }}\n  version: {{ version }}\n\nsource:\n  - url: https://storage.googleapis.com/golang/go{{ version }}.src.tar.gz\n    sha256: 6264609c6b9cd8ed8e02ca84605d727ce1898d74efa79841660b2e3e985a98bd\n    folder: go\n    #patches:\n    #  - 0001-addr2line.diff  # [linux]\n\nbuild:\n  number: 0\n  binary_relocation: False\n  detect_binary_files_with_prefix: False\n  force_ignore_keys:    # [win]\n    - c_compiler        # [win]\n    - cxx_compiler      # [win]\n    - fortran_compiler  # [win]\n  # test data links to these DSOs\n  missing_dso_whitelist:\n    - /usr/lib/libSystem.B.dylib\n    - /usr/lib/libgcc_s.1.dylib\n    - libc.so.6\n\noutputs:\n  - name: {{ name }}-{{ cgo_var }}\n    script: build-core.sh   # [not win]\n    script: build-core.bat  # [win]\n    requirements:\n      build:\n        - {{ compiler('go14') }}\n        - {{ compiler('c') }}              # [unix and cgo]\n        - {{ compiler('cxx') }}            # [unix and cgo]\n        - {{ compiler('fortran') }}        # [unix and cgo]\n        - {{ compiler('m2w64_c') }}        # [win and cgo]\n        - {{ compiler('m2w64_cxx') }}      # [win and cgo]\n        - {{ compiler('m2w64_fortran') }}  # [win and cgo]\n\n        - perl     # [not win]\n        - m2-sed   # [win]\n        - m2-grep  # [win]\n    test:\n      requires:\n        - {{ compiler('c') }}              # [unix and cgo]\n        - {{ compiler('m2w64_c') }}        # [win and cgo]\n        - posix                            # [win]\n      files:\n        - hello.go\n      commands:\n        # Environment checks\n        - go env\n        - test $(go env GOROOT) = ${CONDA_PREFIX}/go         # [unix]\n        - cmd /c if x%GOROOT% NEQ x%CONDA_PREFIX%\\go exit 1  # [win]\n\n        - test $(go env CGO_ENABLED) -eq {{ cgo_enabled }}  # [unix]\n        - for /f \"usebackq tokens=*\" %%a in (`go env CGO_ENABED`) do test %%a -eq {{ cgo_enabled }}  # [win]\n\n        # Test go can actually compile and run a basic program\n        - go run hello.go\n\n  - name: {{ name }}-{{ cgo_var }}_{{ target_platform }}   # [cgo]\n  - name: {{ name }}-{{ cgo_var }}_{{ conda_goplatform }}  # [nocgo]\n    script: build-{{ cgo_var }}-platform.sh   # [unix]\n    script: build-{{ cgo_var }}-platform.bat  # [win]\n    requirements:\n      build:\n        - sed      # [osx]\n        - m2-sed   # [win]\n      run:\n        - {{ pin_subpackage(\"go-\"+cgo_var, exact=True) }}\n    test:\n      files:\n        - hello.go\n        - hello-c.go\n      requires:\n        - {{ compiler('c') }}              # [unix and cgo]\n        - {{ compiler('m2w64_c') }}        # [win and cgo]\n        - posix    # [win]\n        - m2-file  # [win]\n        - m2-grep  # [win]\n      commands:\n        - go env\n\n        # Check that the file types match what is expected for each platform\n        ## https://stackoverflow.com/questions/2768608/batch-equivalent-of-bash-backticks#2768660\n        - go build hello.go\n        - file hello`go env GOEXE` | grep '{{ conda_gofile }}'  # [unix and nocgo]\n        - for /f \"usebackq tokens=*\" %%a in (`go env GOEXE`) do file hello%%a | grep '{{ conda_gofile }}'  # [win and nocgo]\n\n        # Test cgo is working properly\n        - go build hello-c.go  # [cgo]\n  - name: {{ name }}                                         # [nocgo]\n    requirements:                                            # [nocgo]\n      run:                                                   # [nocgo]\n        - {{ pin_subpackage(name+\"-nocgo_\"+target_platform,  # [nocgo]\n                            exact=True) }}                   # [nocgo]\n    test:                                                    # [nocgo]\n      commands:                                              # [nocgo]\n        - go version                                         # [nocgo]\n\n\nabout:\n  home: http://golang.org\n  license: BSD-Style\n  license_family: BSD\n  license_file: go/LICENSE\n  summary: 'The Go Programming Language'\n  description: |\n    Go is expressive, concise, clean, and efficient. Its concurrency mechanisms\n    make it easy to write programs that get the most out of multicore and\n    networked machines, while its novel type system enables flexible and\n    modular program construction. Go compiles quickly to machine code yet has\n    the convenience of garbage collection and the power of run-time reflection.\n    It's a fast, statically typed, compiled language that feels like a\n    dynamically typed, interpreted language.\n  doc_url: https://golang.org/doc\n  dev_url: https://go.googlesource.com/go\n\nextra:\n  recipe-maintainers:\n    - nehaljwani\n    - scopatz\n    - sodre\n",
 "rendered_recipe": {
  "about": {
   "description": "Go is expressive, concise, clean, and efficient. Its concurrency mechanisms\nmake it easy to write programs that get the most out of multicore and\nnetworked machines, while its novel type system enables flexible and\nmodular program construction. Go compiles quickly to machine code yet has\nthe convenience of garbage collection and the power of run-time reflection.\nIt's a fast, statically typed, compiled language that feels like a\ndynamically typed, interpreted language.\n",
   "dev_url": "https://go.googlesource.com/go",
   "doc_url": "https://golang.org/doc",
   "home": "http://golang.org",
   "license": "BSD-Style",
   "license_family": "BSD",
   "license_file": "go/LICENSE",
   "summary": "The Go Programming Language"
  },
  "build": {
   "binary_relocation": false,
   "detect_binary_files_with_prefix": false,
   "missing_dso_whitelist": [
    "/usr/lib/libSystem.B.dylib",
    "/usr/lib/libgcc_s.1.dylib",
    "libc.so.6"
   ],
   "number": "0",
   "string": "hb30d042_0"
  },
  "extra": {
   "copy_test_source_files": true,
   "final": true,
   "recipe-maintainers": [
    "nehaljwani",
    "scopatz",
    "sodre"
   ]
  },
  "package": {
   "name": "go",
   "version": "1.10.2"
  },
  "requirements": {
   "run": [
    "go-nocgo_linux-64 1.10.2 h03773dc_0"
   ]
  },
  "source": [
   {
    "folder": "go",
    "sha256": "6264609c6b9cd8ed8e02ca84605d727ce1898d74efa79841660b2e3e985a98bd",
    "url": "https://storage.googleapis.com/golang/go1.10.2.src.tar.gz"
   }
  ]
 },
 "version": "1.10.2"
}