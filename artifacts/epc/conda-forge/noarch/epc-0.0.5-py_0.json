{
 "about": {
  "channels": [
   "conda-forge",
   "defaults"
  ],
  "conda_build_version": "3.16.2",
  "conda_private": false,
  "conda_version": "4.5.11",
  "description": "EPC (RPC stack for Emacs Lisp) for Python\n=========================================\n\nLinks:\n\n* `Documentation <http://python-epc.readthedocs.org/>`_ (at Read the Docs)\n* `Repository <https://github.com/tkf/python-epc>`_ (at GitHub)\n* `Issue tracker <https://github.com/tkf/python-epc/issues>`_ (at GitHub)\n* `PyPI <http://pypi.python.org/pypi/epc>`_\n* `Travis CI <https://travis-ci.org/#!/tkf/python-epc>`_ |build-status|\n\nOther resources:\n\n* `kiwanami/emacs-epc <https://github.com/kiwanami/emacs-epc>`_\n  (Client and server implementation in Emacs Lisp and Perl.)\n* `tkf/emacs-jedi <https://github.com/tkf/emacs-jedi>`_\n  (Python completion for Emacs using EPC server.)\n\n.. |build-status|\n   image:: https://secure.travis-ci.org/tkf/python-epc.png\n           ?branch=master\n   :target: http://travis-ci.org/tkf/python-epc\n   :alt: Build Status\n\n\nWhat is this?\n-------------\n\nEPC is an RPC stack for Emacs Lisp and Python-EPC is its server side\nand client side implementation in Python.  Using Python-EPC, you can\neasily call Emacs Lisp functions from Python and Python functions from\nEmacs.  For example, you can use Python GUI module to build widgets\nfor Emacs (see `examples/gtk/server.py`_ for example).\n\nPython-EPC is tested against Python 2.6, 2.7 and 3.2.\n\nInstall\n-------\n\nTo install Python-EPC and its dependency sexpdata_, run the following\ncommand.::\n\n   pip install epc\n\n.. _sexpdata: https://github.com/tkf/sexpdata\n\n\nUsage\n-----\n\nSave the following code as ``my-server.py``.\n(You can find functionally the same code in `examples/echo/server.py`_)::\n\n   from epc.server import EPCServer\n\n   server = EPCServer(('localhost', 0))\n\n   @server.register_function\n   def echo(*a):\n       return a\n\n   server.print_port()\n   server.serve_forever()\n\n\nAnd then run the following code from Emacs.\nThis is a stripped version of `examples/echo/client.el`_ included in\nPython-EPC repository_.::\n\n   (require 'epc)\n\n   (defvar my-epc (epc:start-epc \"python\" '(\"my-server.py\")))\n\n   (deferred:$\n     (epc:call-deferred my-epc 'echo '(10))\n     (deferred:nextc it\n       (lambda (x) (message \"Return : %S\" x))))\n\n   (message \"Return : %S\" (epc:call-sync my-epc 'echo '(10 40)))\n\n\n.. _examples/echo/server.py:\n   https://github.com/tkf/python-epc/blob/master/examples/echo/server.py\n.. _examples/echo/client.el:\n   https://github.com/tkf/python-epc/blob/master/examples/echo/client.el\n\nIf you have carton_ installed, you can run the above sample by\nsimply typing the following commands::\n\n   make elpa        # install EPC in a separated environment\n   make run-sample  # run examples/echo/client.el\n\n.. _carton: https://github.com/rejeep/carton\n\n\nFor example of bidirectional communication and integration with GTK,\nsee `examples/gtk/server.py`_.  You can run this example by::\n\n   make elpa\n   make run-gtk-sample  # run examples/gtk/client.el\n\n.. _examples/gtk/server.py:\n   https://github.com/tkf/python-epc/blob/master/examples/gtk/server.py\n\n\nLicense\n-------\n\nPython-EPC is licensed under GPL v3.\nSee COPYING for details.\n",
  "env_vars": {
   "CIO_TEST": "<not set>"
  },
  "extra": {
   "copy_test_source_files": true,
   "final": true,
   "recipe-maintainers": [
    "asmeurer"
   ]
  },
  "home": "https://github.com/tkf/python-epc",
  "identifiers": [],
  "keywords": [],
  "license": "GPL3",
  "license_family": "GPL3",
  "license_file": "/home/conda/recipe_root/COPYING",
  "root_pkgs": [
   "six 1.11.0 py36_1001",
   "bzip2 1.0.6 h470a237_2",
   "beautifulsoup4 4.6.3 py36_1000",
   "asn1crypto 0.24.0 py36_1003",
   "python-libarchive-c 2.8 py36_1004",
   "sqlite 3.25.2 hb1c47c0_0",
   "pytz 2018.6 py_0",
   "libedit 3.1.20170329 haf1bffa_1",
   "requests 2.20.0 py36_1000",
   "readline 7.0 haf1bffa_1",
   "anaconda-client 1.7.1 py_0",
   "xz 5.2.4 h470a237_1",
   "ncurses 6.1 hfc679d8_1",
   "pycosat 0.6.3 py36h470a237_1",
   "idna 2.7 py36_1002",
   "libiconv 1.15 h470a237_3",
   "yaml 0.1.7 h470a237_1",
   "psutil 5.4.7 py36h470a237_1",
   "pycparser 2.19 py_0",
   "zlib 1.2.11 h470a237_3",
   "tini 0.18.0 h470a237_1",
   "pyyaml 3.13 py36h470a237_1",
   "wheel 0.32.2 py36_0",
   "cryptography-vectors 2.3.1 py36_1000",
   "pysocks 1.6.8 py36_1002",
   "decorator 4.3.0 py_0",
   "glob2 0.6 py_0",
   "urllib3 1.23 py36_1001",
   "python-dateutil 2.7.5 py_0",
   "jinja2 2.10 py_1",
   "nbformat 4.4.0 py_1",
   "jsonschema 2.6.0 py36_1002",
   "chardet 3.0.4 py36_1003",
   "traitlets 4.3.2 py36_1000",
   "conda-env 2.6.0 1",
   "pkginfo 1.4.2 py_1",
   "patchelf 0.9 hfc679d8_2",
   "pip 18.1 py36_1000",
   "perl 5.26.2 h470a237_0",
   "setuptools 40.5.0 py36_0",
   "filelock 3.0.9 py_0",
   "tk 8.6.8 ha92aebf_0",
   "markupsafe 1.0 py36h470a237_1",
   "ipython_genutils 0.2.0 py_1",
   "ruamel_yaml 0.15.71 py36h470a237_0",
   "libffi 3.2.1 hfc679d8_5",
   "jupyter_core 4.4.0 py_0",
   "tqdm 4.28.1 py_0",
   "cffi 1.11.5 py36h5e8e0c9_1",
   "pyopenssl 18.0.0 py36_1000",
   "expat 2.2.5 hfc679d8_2",
   "gettext 0.19.8.1 h5e8e0c9_1",
   "gosu 1.10 h81701ea_1001",
   "clyent 1.2.2 py_1",
   "curl 7.61.1 hbc83047_0",
   "conda 4.5.11 py36_0",
   "libcurl 7.61.1 h20c2e04_0",
   "libssh2 1.8.0 h1ba5d50_4",
   "libarchive 3.3.3 h5d8350f_2",
   "libgcc-ng 8.2.0 hdf63c60_1",
   "conda-forge-ci-setup 2.0.8 py36_0",
   "cryptography 2.3.1 py36h1ba5d50_2",
   "conda-build 3.16.2 py36_0",
   "libxml2 2.9.8 h26e45fe_1",
   "lz4-c 1.8.1.2 h14c3975_0",
   "certifi 2018.10.15 py36_0",
   "git 2.11.1 0",
   "openssl 1.1.1 h7b6447c_0",
   "icu 58.2 h9c2bf20_1",
   "python 3.6.7 h0371630_0",
   "zstd 1.3.3 h84994c4_0",
   "ca-certificates 2018.03.07 0",
   "lzo 2.10 h49e0be7_2",
   "krb5 1.16.1 h173b8e3_7",
   "libstdcxx-ng 8.2.0 hdf63c60_1",
   "click 7.0 py36_0"
  ],
  "summary": "EPC (RPC stack for Emacs Lisp) implementation in Python",
  "tags": []
 },
 "conda_build_config": {
  "build_number_decrement": "0",
  "c_compiler": "gcc",
  "channel_sources": "conda-forge,defaults",
  "channel_targets": "conda-forge main",
  "cpu_optimization_target": "nocona",
  "cran_mirror": "https://cran.r-project.org",
  "cxx_compiler": "gxx",
  "docker_image": "condaforge/linux-anvil",
  "fortran_compiler": "gfortran",
  "ignore_build_only_deps": "numpy",
  "lua": "5",
  "numpy": "1.11",
  "perl": "5.26.0",
  "pin_run_as_build": {
   "python": {
    "max_pin": "x.x",
    "min_pin": "x.x"
   },
   "r-base": {
    "max_pin": "x.x.x",
    "min_pin": "x.x.x"
   }
  },
  "python": "2.7",
  "r_base": "3.5",
  "target_platform": "linux-64"
 },
 "files": [
  "site-packages/epc-0.0.5.dist-info/INSTALLER",
  "site-packages/epc-0.0.5.dist-info/METADATA",
  "site-packages/epc-0.0.5.dist-info/RECORD",
  "site-packages/epc-0.0.5.dist-info/WHEEL",
  "site-packages/epc/__init__.py",
  "site-packages/epc/client.py",
  "site-packages/epc/core.py",
  "site-packages/epc/handler.py",
  "site-packages/epc/py3compat.py",
  "site-packages/epc/server.py",
  "site-packages/epc/tests/__init__.py",
  "site-packages/epc/tests/test_client.py",
  "site-packages/epc/tests/test_dispatcher.py",
  "site-packages/epc/tests/test_py2py.py",
  "site-packages/epc/tests/test_server.py",
  "site-packages/epc/tests/test_utils.py",
  "site-packages/epc/tests/utils.py",
  "site-packages/epc/utils.py"
 ],
 "index": {
  "arch": null,
  "build": "py_0",
  "build_number": 0,
  "depends": [
   "python",
   "sexpdata >=0.0.3"
  ],
  "license": "GPL3",
  "license_family": "GPL3",
  "name": "epc",
  "noarch": "python",
  "platform": null,
  "subdir": "noarch",
  "timestamp": 1541214590624,
  "version": "0.0.5"
 },
 "metadata_version": 1,
 "name": "epc",
 "raw_recipe": "{% set name = \"epc\" %}\n{% set version = \"0.0.5\" %}\n{% set file_ext = \"tar.gz\" %}\n{% set hash_type = \"sha256\" %}\n{% set hash_value = \"a14d2ea74817955a20eb00812e3a4630a132897eb4d976420240f1152c0d7d25\" %}\n\npackage:\n  name: '{{ name|lower }}'\n  version: '{{ version }}'\n\nsource:\n  fn: '{{ name }}-{{ version }}.{{ file_ext }}'\n  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.{{ file_ext }}\n  '{{ hash_type }}': '{{ hash_value }}'\n\nbuild:\n  number: 0\n  noarch: python\n  script: python -m pip install --no-deps --ignore-installed .\n\nrequirements:\n  build:\n    - python\n    - pip\n    - sexpdata >=0.0.3\n  run:\n    - python\n    - sexpdata >=0.0.3\n\ntest:\n  imports:\n    - epc\n    - epc.tests\n\nabout:\n  home: https://github.com/tkf/python-epc\n  license: GPL3\n  license_family: GPL3\n  license_file: '{{ environ[\"RECIPE_DIR\"] }}/COPYING'\n  summary: EPC (RPC stack for Emacs Lisp) implementation in Python\n  description: |\n    EPC (RPC stack for Emacs Lisp) for Python\n    =========================================\n\n    Links:\n\n    * `Documentation <http://python-epc.readthedocs.org/>`_ (at Read the Docs)\n    * `Repository <https://github.com/tkf/python-epc>`_ (at GitHub)\n    * `Issue tracker <https://github.com/tkf/python-epc/issues>`_ (at GitHub)\n    * `PyPI <http://pypi.python.org/pypi/epc>`_\n    * `Travis CI <https://travis-ci.org/#!/tkf/python-epc>`_ |build-status|\n\n    Other resources:\n\n    * `kiwanami/emacs-epc <https://github.com/kiwanami/emacs-epc>`_\n      (Client and server implementation in Emacs Lisp and Perl.)\n    * `tkf/emacs-jedi <https://github.com/tkf/emacs-jedi>`_\n      (Python completion for Emacs using EPC server.)\n\n    .. |build-status|\n       image:: https://secure.travis-ci.org/tkf/python-epc.png\n               ?branch=master\n       :target: http://travis-ci.org/tkf/python-epc\n       :alt: Build Status\n\n\n    What is this?\n    -------------\n\n    EPC is an RPC stack for Emacs Lisp and Python-EPC is its server side\n    and client side implementation in Python.  Using Python-EPC, you can\n    easily call Emacs Lisp functions from Python and Python functions from\n    Emacs.  For example, you can use Python GUI module to build widgets\n    for Emacs (see `examples/gtk/server.py`_ for example).\n\n    Python-EPC is tested against Python 2.6, 2.7 and 3.2.\n\n    Install\n    -------\n\n    To install Python-EPC and its dependency sexpdata_, run the following\n    command.::\n\n       pip install epc\n\n    .. _sexpdata: https://github.com/tkf/sexpdata\n\n\n    Usage\n    -----\n\n    Save the following code as ``my-server.py``.\n    (You can find functionally the same code in `examples/echo/server.py`_)::\n\n       from epc.server import EPCServer\n\n       server = EPCServer(('localhost', 0))\n\n       @server.register_function\n       def echo(*a):\n           return a\n\n       server.print_port()\n       server.serve_forever()\n\n\n    And then run the following code from Emacs.\n    This is a stripped version of `examples/echo/client.el`_ included in\n    Python-EPC repository_.::\n\n       (require 'epc)\n\n       (defvar my-epc (epc:start-epc \"python\" '(\"my-server.py\")))\n\n       (deferred:$\n         (epc:call-deferred my-epc 'echo '(10))\n         (deferred:nextc it\n           (lambda (x) (message \"Return : %S\" x))))\n\n       (message \"Return : %S\" (epc:call-sync my-epc 'echo '(10 40)))\n\n\n    .. _examples/echo/server.py:\n       https://github.com/tkf/python-epc/blob/master/examples/echo/server.py\n    .. _examples/echo/client.el:\n       https://github.com/tkf/python-epc/blob/master/examples/echo/client.el\n\n    If you have carton_ installed, you can run the above sample by\n    simply typing the following commands::\n\n       make elpa        # install EPC in a separated environment\n       make run-sample  # run examples/echo/client.el\n\n    .. _carton: https://github.com/rejeep/carton\n\n\n    For example of bidirectional communication and integration with GTK,\n    see `examples/gtk/server.py`_.  You can run this example by::\n\n       make elpa\n       make run-gtk-sample  # run examples/gtk/client.el\n\n    .. _examples/gtk/server.py:\n       https://github.com/tkf/python-epc/blob/master/examples/gtk/server.py\n\n\n    License\n    -------\n\n    Python-EPC is licensed under GPL v3.\n    See COPYING for details.\n\nextra:\n  recipe-maintainers:\n    - asmeurer\n",
 "rendered_recipe": {
  "about": {
   "description": "EPC (RPC stack for Emacs Lisp) for Python\n=========================================\n\nLinks:\n\n* `Documentation <http://python-epc.readthedocs.org/>`_ (at Read the Docs)\n* `Repository <https://github.com/tkf/python-epc>`_ (at GitHub)\n* `Issue tracker <https://github.com/tkf/python-epc/issues>`_ (at GitHub)\n* `PyPI <http://pypi.python.org/pypi/epc>`_\n* `Travis CI <https://travis-ci.org/#!/tkf/python-epc>`_ |build-status|\n\nOther resources:\n\n* `kiwanami/emacs-epc <https://github.com/kiwanami/emacs-epc>`_\n  (Client and server implementation in Emacs Lisp and Perl.)\n* `tkf/emacs-jedi <https://github.com/tkf/emacs-jedi>`_\n  (Python completion for Emacs using EPC server.)\n\n.. |build-status|\n   image:: https://secure.travis-ci.org/tkf/python-epc.png\n           ?branch=master\n   :target: http://travis-ci.org/tkf/python-epc\n   :alt: Build Status\n\n\nWhat is this?\n-------------\n\nEPC is an RPC stack for Emacs Lisp and Python-EPC is its server side\nand client side implementation in Python.  Using Python-EPC, you can\neasily call Emacs Lisp functions from Python and Python functions from\nEmacs.  For example, you can use Python GUI module to build widgets\nfor Emacs (see `examples/gtk/server.py`_ for example).\n\nPython-EPC is tested against Python 2.6, 2.7 and 3.2.\n\nInstall\n-------\n\nTo install Python-EPC and its dependency sexpdata_, run the following\ncommand.::\n\n   pip install epc\n\n.. _sexpdata: https://github.com/tkf/sexpdata\n\n\nUsage\n-----\n\nSave the following code as ``my-server.py``.\n(You can find functionally the same code in `examples/echo/server.py`_)::\n\n   from epc.server import EPCServer\n\n   server = EPCServer(('localhost', 0))\n\n   @server.register_function\n   def echo(*a):\n       return a\n\n   server.print_port()\n   server.serve_forever()\n\n\nAnd then run the following code from Emacs.\nThis is a stripped version of `examples/echo/client.el`_ included in\nPython-EPC repository_.::\n\n   (require 'epc)\n\n   (defvar my-epc (epc:start-epc \"python\" '(\"my-server.py\")))\n\n   (deferred:$\n     (epc:call-deferred my-epc 'echo '(10))\n     (deferred:nextc it\n       (lambda (x) (message \"Return : %S\" x))))\n\n   (message \"Return : %S\" (epc:call-sync my-epc 'echo '(10 40)))\n\n\n.. _examples/echo/server.py:\n   https://github.com/tkf/python-epc/blob/master/examples/echo/server.py\n.. _examples/echo/client.el:\n   https://github.com/tkf/python-epc/blob/master/examples/echo/client.el\n\nIf you have carton_ installed, you can run the above sample by\nsimply typing the following commands::\n\n   make elpa        # install EPC in a separated environment\n   make run-sample  # run examples/echo/client.el\n\n.. _carton: https://github.com/rejeep/carton\n\n\nFor example of bidirectional communication and integration with GTK,\nsee `examples/gtk/server.py`_.  You can run this example by::\n\n   make elpa\n   make run-gtk-sample  # run examples/gtk/client.el\n\n.. _examples/gtk/server.py:\n   https://github.com/tkf/python-epc/blob/master/examples/gtk/server.py\n\n\nLicense\n-------\n\nPython-EPC is licensed under GPL v3.\nSee COPYING for details.\n",
   "home": "https://github.com/tkf/python-epc",
   "license": "GPL3",
   "license_family": "GPL3",
   "license_file": "/home/conda/recipe_root/COPYING",
   "summary": "EPC (RPC stack for Emacs Lisp) implementation in Python"
  },
  "build": {
   "noarch": "python",
   "number": "0",
   "script": "python -m pip install --no-deps --ignore-installed .",
   "string": "py_0"
  },
  "extra": {
   "copy_test_source_files": true,
   "final": true,
   "recipe-maintainers": [
    "asmeurer"
   ]
  },
  "package": {
   "name": "epc",
   "version": "0.0.5"
  },
  "requirements": {
   "build": [
    "ca-certificates 2018.10.15 ha4d7672_0",
    "certifi 2018.10.15 py27_1000",
    "libffi 3.2.1 hfc679d8_5",
    "libgcc-ng 7.2.0 hdf63c60_3",
    "libstdcxx-ng 7.2.0 hdf63c60_3",
    "ncurses 6.1 hfc679d8_1",
    "openssl 1.0.2p h470a237_1",
    "pip 18.1 py27_1000",
    "python 2.7.15 h33da82c_4",
    "readline 7.0 haf1bffa_1",
    "setuptools 40.5.0 py27_0",
    "sexpdata 0.0.3 py_0",
    "sqlite 3.25.2 hb1c47c0_0",
    "tk 8.6.8 ha92aebf_0",
    "wheel 0.32.2 py27_0",
    "zlib 1.2.11 h470a237_3"
   ],
   "run": [
    "python",
    "sexpdata >=0.0.3"
   ]
  },
  "source": {
   "fn": "epc-0.0.5.tar.gz",
   "sha256": "a14d2ea74817955a20eb00812e3a4630a132897eb4d976420240f1152c0d7d25",
   "url": "https://pypi.io/packages/source/e/epc/epc-0.0.5.tar.gz"
  },
  "test": {
   "imports": [
    "epc",
    "epc.tests"
   ]
  }
 },
 "version": "0.0.5"
}