{
 "about": {
  "channels": [
   "conda-forge",
   "defaults"
  ],
  "conda_build_version": "3.17.8",
  "conda_private": false,
  "conda_version": "4.6.12",
  "env_vars": {
   "CIO_TEST": "<not set>"
  },
  "extra": {
   "copy_test_source_files": true,
   "final": true,
   "recipe-maintainers": [
    "alexbw",
    "jakirkham",
    "jjhelmus",
    "grlee77",
    "jschueller",
    "beckermr",
    "egpbos"
   ]
  },
  "home": "http://fftw.org",
  "identifiers": [],
  "keywords": [],
  "license": "GPL 2",
  "license_file": "COPYING",
  "root_pkgs": [
   "ncurses 6.1 hf484d3e_1002",
   "pytz 2018.9 py_0",
   "sqlite 3.26.0 h67949de_1001",
   "soupsieve 1.8 py37_0",
   "curl 7.64.0 h646f8bb_2",
   "idna 2.8 py37_1000",
   "ipython_genutils 0.2.0 py_1",
   "filelock 3.0.10 py_0",
   "python 3.7.2 h381d211_0",
   "libstdcxx-ng 7.3.0 hdf63c60_0",
   "readline 7.0 hf8c457e_1001",
   "beautifulsoup4 4.7.1 py37_1001",
   "attrs 19.1.0 py_0",
   "libiconv 1.15 h516909a_1005",
   "git 2.21.0 pl526h2882143_0",
   "requests 2.21.0 py37_1000",
   "krb5 1.16.3 h05b26f9_1001",
   "tk 8.6.9 h84994c4_1000",
   "bzip2 1.0.6 h14c3975_1002",
   "zlib 1.2.11 h14c3975_1004",
   "pysocks 1.6.8 py37_1002",
   "anaconda-client 1.7.2 py_0",
   "zstd 1.3.3 1",
   "pyopenssl 19.0.0 py37_0",
   "clyent 1.2.2 py_1",
   "openssl 1.1.1b h14c3975_1",
   "pyrsistent 0.14.11 py37h14c3975_0",
   "libgcc-ng 7.3.0 hdf63c60_0",
   "six 1.12.0 py37_1000",
   "chardet 3.0.4 py37_1003",
   "conda-build 3.17.8 py37_1",
   "cryptography 2.6.1 py37h9d9f1b6_0",
   "jinja2 2.10 py_1",
   "psutil 5.6.1 py37h14c3975_0",
   "python-libarchive-c 2.8 py37_1004",
   "ca-certificates 2019.3.9 hecc5488_0",
   "pip 19.0.3 py37_0",
   "gosu 1.10 h81701ea_1001",
   "certifi 2019.3.9 py37_0",
   "asn1crypto 0.24.0 py37_1003",
   "python-dateutil 2.8.0 py_0",
   "decorator 4.4.0 py_0",
   "lzo 2.10 h14c3975_1000",
   "jsonschema 3.0.1 py37_0",
   "tini 0.18.0 h14c3975_1001",
   "expat 2.2.5 hf484d3e_1002",
   "jupyter_core 4.4.0 py_0",
   "pycosat 0.6.3 py37h14c3975_1001",
   "pyyaml 5.1 py37h14c3975_0",
   "libcurl 7.64.0 h541490c_2",
   "lz4-c 1.8.1.2 0",
   "wheel 0.33.1 py37_0",
   "cffi 1.12.2 py37hf0e25f4_1",
   "libedit 3.1.20170329 hf8c457e_1001",
   "yaml 0.1.7 h14c3975_1001",
   "traitlets 4.3.2 py37_1000",
   "patchelf 0.9 hf484d3e_1004",
   "urllib3 1.24.1 py37_1000",
   "perl 5.26.2 h14c3975_1002",
   "libssh2 1.8.1 h22169c7_0",
   "setuptools 40.8.0 py37_0",
   "icu 58.2 hf484d3e_1000",
   "libffi 3.2.1 he1b5a44_1006",
   "libarchive 3.3.3 he5c8681_1003",
   "ruamel_yaml 0.15.71 py37h14c3975_1000",
   "py-lief 0.9.0 py37hf484d3e_0",
   "libxml2 2.9.8 h143f9aa_1005",
   "tqdm 4.31.1 py_0",
   "liblief 0.9.0 h1532aa0_0",
   "gettext 0.19.8.1 hc5be6a0_1002",
   "nbformat 4.4.0 py_1",
   "glob2 0.6 py_0",
   "pycparser 2.19 py37_1",
   "xz 5.2.4 h14c3975_1001",
   "conda-env 2.6.0 1",
   "pkginfo 1.5.0.1 py_0",
   "markupsafe 1.1.1 py37h14c3975_0",
   "conda-forge-ci-setup 2.1.8 py37_0",
   "conda 4.6.12 py37_2",
   "click 7.0 py_0"
  ],
  "summary": "The fastest Fourier transform in the west.",
  "tags": []
 },
 "conda_build_config": {
  "c_compiler": "gcc",
  "c_compiler_version": "7",
  "channel_sources": "conda-forge,defaults",
  "channel_targets": "conda-forge main",
  "cpu_optimization_target": "nocona",
  "cran_mirror": "https://cran.r-project.org",
  "cxx_compiler": "gxx",
  "docker_image": "condaforge/linux-anvil-comp7",
  "extend_keys": [
   "ignore_version",
   "pin_run_as_build",
   "extend_keys",
   "ignore_build_only_deps"
  ],
  "fortran_compiler": "gfortran",
  "fortran_compiler_version": "7",
  "ignore_build_only_deps": [
   "numpy",
   "python"
  ],
  "lua": "5",
  "mpi": "mpich",
  "numpy": "1.11",
  "perl": "5.26",
  "pin_run_as_build": {
   "perl": {
    "max_pin": "x.x.x"
   },
   "python": {
    "max_pin": "x.x",
    "min_pin": "x.x"
   },
   "r-base": {
    "max_pin": "x.x.x",
    "min_pin": "x.x.x"
   }
  },
  "python": "3.7",
  "r_base": "3.5",
  "target_platform": "linux-64"
 },
 "files": [
  "bin/fftw-wisdom",
  "bin/fftw-wisdom-to-conf",
  "bin/fftwf-wisdom",
  "bin/fftwl-wisdom",
  "include/fftw3-mpi.f03",
  "include/fftw3-mpi.h",
  "include/fftw3.f",
  "include/fftw3.f03",
  "include/fftw3.h",
  "include/fftw3l-mpi.f03",
  "include/fftw3l.f03",
  "include/fftw3q.f03",
  "lib/cmake/fftw3/FFTW3Config.cmake",
  "lib/cmake/fftw3/FFTW3ConfigVersion.cmake",
  "lib/cmake/fftw3/FFTW3fConfig.cmake",
  "lib/cmake/fftw3/FFTW3fConfigVersion.cmake",
  "lib/cmake/fftw3/FFTW3lConfig.cmake",
  "lib/cmake/fftw3/FFTW3lConfigVersion.cmake",
  "lib/libfftw3.a",
  "lib/libfftw3.so",
  "lib/libfftw3.so.3",
  "lib/libfftw3.so.3.5.8",
  "lib/libfftw3_mpi.a",
  "lib/libfftw3_mpi.so",
  "lib/libfftw3_mpi.so.3",
  "lib/libfftw3_mpi.so.3.5.8",
  "lib/libfftw3_omp.a",
  "lib/libfftw3_omp.so",
  "lib/libfftw3_omp.so.3",
  "lib/libfftw3_omp.so.3.5.8",
  "lib/libfftw3_threads.a",
  "lib/libfftw3_threads.so",
  "lib/libfftw3_threads.so.3",
  "lib/libfftw3_threads.so.3.5.8",
  "lib/libfftw3f.a",
  "lib/libfftw3f.so",
  "lib/libfftw3f.so.3",
  "lib/libfftw3f.so.3.5.8",
  "lib/libfftw3f_mpi.a",
  "lib/libfftw3f_mpi.so",
  "lib/libfftw3f_mpi.so.3",
  "lib/libfftw3f_mpi.so.3.5.8",
  "lib/libfftw3f_omp.a",
  "lib/libfftw3f_omp.so",
  "lib/libfftw3f_omp.so.3",
  "lib/libfftw3f_omp.so.3.5.8",
  "lib/libfftw3f_threads.a",
  "lib/libfftw3f_threads.so",
  "lib/libfftw3f_threads.so.3",
  "lib/libfftw3f_threads.so.3.5.8",
  "lib/libfftw3l.a",
  "lib/libfftw3l.so",
  "lib/libfftw3l.so.3",
  "lib/libfftw3l.so.3.5.8",
  "lib/libfftw3l_mpi.a",
  "lib/libfftw3l_mpi.so",
  "lib/libfftw3l_mpi.so.3",
  "lib/libfftw3l_mpi.so.3.5.8",
  "lib/libfftw3l_omp.a",
  "lib/libfftw3l_omp.so",
  "lib/libfftw3l_omp.so.3",
  "lib/libfftw3l_omp.so.3.5.8",
  "lib/libfftw3l_threads.a",
  "lib/libfftw3l_threads.so",
  "lib/libfftw3l_threads.so.3",
  "lib/libfftw3l_threads.so.3.5.8",
  "lib/pkgconfig/fftw3.pc",
  "lib/pkgconfig/fftw3f.pc",
  "lib/pkgconfig/fftw3l.pc",
  "share/info/fftw3.info",
  "share/info/fftw3.info-1",
  "share/info/fftw3.info-2",
  "share/man/man1/fftw-wisdom-to-conf.1",
  "share/man/man1/fftw-wisdom.1",
  "share/man/man1/fftwf-wisdom.1",
  "share/man/man1/fftwl-wisdom.1"
 ],
 "index": {
  "arch": "x86_64",
  "build": "mpi_mpich_h3f9e1be_1005",
  "build_number": 1005,
  "depends": [
   "libgcc-ng >=7.3.0",
   "libgfortran-ng >=7,<8.0a0",
   "mpich >=3.2,<3.3.0a0"
  ],
  "license": "GPL 2",
  "name": "fftw",
  "platform": "linux",
  "subdir": "linux-64",
  "timestamp": 1555424216794,
  "version": "3.3.8"
 },
 "metadata_version": 1,
 "name": "fftw",
 "raw_recipe": "{% set version = \"3.3.8\" %}\n{% set build = 1005 %}\n\n# ensure mpi is defined (needed for conda-smithy recipe-lint)\n{% set mpi = mpi or 'nompi' %}\n\npackage:\n  name: fftw\n  version: {{ version }}\n\nsource:\n  fn: fftw-{{ version }}.tar.gz\n  url: http://www.fftw.org/fftw-{{ version }}.tar.gz\n  sha256: 6113262f6e92c5bd474f2875fa1b01054c4ad5040f6b0da7c03c98821d9ae303\n\nbuild:\n  # prioritize nompi variant via build number\n  {% if mpi == 'nompi' %}\n  {% set build = build + 100 %}\n  {% endif %}\n  number: {{ build }}\n\n  # add build string so packages can depend on\n  # mpi or nompi variants explicitly:\n  # `pkg * mpi_mpich_*` for mpich\n  # `pkg * mpi_*` for any mpi\n  # `pkg * nompi_*` for no mpi\n  {% if mpi != 'nompi' %}\n  {% set mpi_prefix = \"mpi_\" + mpi %}\n  {% else %}\n  {% set mpi_prefix = \"nompi\" %}\n  {% endif %}\n  string: \"{{ mpi_prefix }}_h{{ PKG_HASH }}_{{ build }}\"\n\n  {% if mpi != 'nompi' %}\n  run_exports:\n    - fftw * {{ mpi_prefix }}_*\n  {% endif %}\n\nrequirements:\n  build:\n    - perl   # [not win]\n    - cmake  # [win]\n    - {{ compiler('c') }}\n    - {{ compiler('fortran') }}  # [not win]\n    - llvm-openmp >=4.0.1  # [osx]\n  host:\n    - {{ mpi }}  # [mpi != 'nompi']\n    - llvm-openmp >=4.0.1  # [osx]\n  run:\n    - llvm-openmp >=4.0.1  # [osx]\n\ntest:\n  requires:\n    - python\n  commands:\n    # Verify library contains Fortran symbols\n    - |                                                 # [not win]\n      strings ${PREFIX}/lib/libfftw3.a | grep -q dfftw || exit 1  # [not win]\n\n    # Verify existence of library files\n    - test -f ${PREFIX}/lib/libfftw3f.a || exit 1           # [not win]\n    - test -f ${PREFIX}/lib/libfftw3.a || exit 1            # [not win]\n    - test -f ${PREFIX}/lib/libfftw3l.a || exit 1           # [not win]\n    - test -f ${PREFIX}/lib/libfftw3f_threads.a || exit 1   # [not win]\n    - test -f ${PREFIX}/lib/libfftw3_threads.a || exit 1    # [not win]\n    - test -f ${PREFIX}/lib/libfftw3l_threads.a || exit 1   # [not win]\n    - test -f ${PREFIX}/lib/libfftw3f_omp.a || exit 1       # [not win]\n    - test -f ${PREFIX}/lib/libfftw3_omp.a || exit 1        # [not win]\n    - test -f ${PREFIX}/lib/libfftw3l_omp.a || exit 1       # [not win]\n\n    # Verify headers are installed\n    - test -f ${PREFIX}/include/fftw3.h || exit 1           # [not win]\n    - if not exist %LIBRARY_INC%\\\\fftw3.h exit 1            # [win]\n\n    # Verify shared libraries are installed\n    {% set fftw_libs = [\n            \"libfftw3\",\n            \"libfftw3_threads\",\n            \"libfftw3f\",\n            \"libfftw3f_threads\",\n            \"libfftw3l\",\n            \"libfftw3l_threads\",\n    ] %}\n    {% set fftw_omp_libs = [\n            \"libfftw3_omp\",\n            \"libfftw3f_omp\",\n            \"libfftw3l_omp\",\n    ] %}\n    {% set fftw_mpi_libs = [\n            \"libfftw3_mpi\",\n            \"libfftw3f_mpi\",\n            \"libfftw3l_mpi\",\n    ] %}\n\n    {% for lib in fftw_libs %}\n    - python -c \"import ctypes; ctypes.cdll[r'${PREFIX}/lib/{{ lib }}${SHLIB_EXT}']\"  # [unix]\n    {% endfor %}\n\n    {% for lib in fftw_omp_libs %}\n    - python -c \"import ctypes; ctypes.cdll[r'${PREFIX}/lib/{{ lib }}${SHLIB_EXT}']\"  # [unix]\n    {% endfor %}\n\n    {% if mpi != 'nompi' %}\n    {% for lib in fftw_mpi_libs %}\n    # you need to link to the mpi libs to load the dll, so we just test\n    # if it exists\n    - test -f ${PREFIX}/lib/{{ lib }}${SHLIB_EXT} || exit 1  # [unix]\n    {% endfor %}\n    {% endif %}\n\n    {% set fftw_libs = [\"fftw3f\", \"fftw3\"] %}\n\n    {% for base in fftw_libs %}\n    - if not exist %LIBRARY_LIB%\\\\{{ base }}.lib exit 1  # [win]\n    - if not exist %LIBRARY_BIN%\\\\{{ base }}.dll exit 1  # [win]\n    {% endfor %}\n\nabout:\n  home: http://fftw.org\n  license: GPL 2\n  license_file: COPYING\n  summary: \"The fastest Fourier transform in the west.\"\n\nextra:\n  recipe-maintainers:\n    - alexbw\n    - jakirkham\n    - jjhelmus\n    - grlee77\n    - jschueller\n    - beckermr\n    - egpbos\n",
 "rendered_recipe": {
  "about": {
   "home": "http://fftw.org",
   "license": "GPL 2",
   "license_file": "COPYING",
   "summary": "The fastest Fourier transform in the west."
  },
  "build": {
   "number": "1005",
   "run_exports": [
    "fftw * mpi_mpich_*"
   ],
   "string": "mpi_mpich_h3f9e1be_1005"
  },
  "extra": {
   "copy_test_source_files": true,
   "final": true,
   "recipe-maintainers": [
    "alexbw",
    "beckermr",
    "egpbos",
    "grlee77",
    "jakirkham",
    "jjhelmus",
    "jschueller"
   ]
  },
  "package": {
   "name": "fftw",
   "version": "3.3.8"
  },
  "requirements": {
   "build": [
    "binutils_impl_linux-64 2.31.1 h6176602_1",
    "binutils_linux-64 2.31.1 h6176602_6",
    "gcc_impl_linux-64 7.3.0 habb00fd_1",
    "gcc_linux-64 7.3.0 h553295d_6",
    "gfortran_impl_linux-64 7.3.0 hdf63c60_1",
    "gfortran_linux-64 7.3.0 h553295d_6",
    "libgcc-ng 8.2.0 hdf63c60_1",
    "libgfortran-ng 7.3.0 hdf63c60_0",
    "libstdcxx-ng 8.2.0 hdf63c60_1",
    "perl 5.26.2 h14c3975_1002"
   ],
   "host": [
    "libgcc-ng 8.2.0 hdf63c60_1",
    "libgfortran-ng 7.3.0 hdf63c60_0",
    "libstdcxx-ng 8.2.0 hdf63c60_1",
    "mpi 1.0 mpich",
    "mpich 3.2.1 h1c2f66e_1008"
   ],
   "run": [
    "libgcc-ng >=7.3.0",
    "libgfortran-ng >=7,<8.0a0",
    "mpich >=3.2,<3.3.0a0"
   ]
  },
  "source": {
   "fn": "fftw-3.3.8.tar.gz",
   "sha256": "6113262f6e92c5bd474f2875fa1b01054c4ad5040f6b0da7c03c98821d9ae303",
   "url": "http://www.fftw.org/fftw-3.3.8.tar.gz"
  },
  "test": {
   "commands": [
    "strings ${PREFIX}/lib/libfftw3.a | grep -q dfftw || exit 1\n",
    "test -f ${PREFIX}/lib/libfftw3f.a || exit 1",
    "test -f ${PREFIX}/lib/libfftw3.a || exit 1",
    "test -f ${PREFIX}/lib/libfftw3l.a || exit 1",
    "test -f ${PREFIX}/lib/libfftw3f_threads.a || exit 1",
    "test -f ${PREFIX}/lib/libfftw3_threads.a || exit 1",
    "test -f ${PREFIX}/lib/libfftw3l_threads.a || exit 1",
    "test -f ${PREFIX}/lib/libfftw3f_omp.a || exit 1",
    "test -f ${PREFIX}/lib/libfftw3_omp.a || exit 1",
    "test -f ${PREFIX}/lib/libfftw3l_omp.a || exit 1",
    "test -f ${PREFIX}/include/fftw3.h || exit 1",
    "python -c \"import ctypes; ctypes.cdll[r'${PREFIX}/lib/libfftw3${SHLIB_EXT}']\"",
    "python -c \"import ctypes; ctypes.cdll[r'${PREFIX}/lib/libfftw3_threads${SHLIB_EXT}']\"",
    "python -c \"import ctypes; ctypes.cdll[r'${PREFIX}/lib/libfftw3f${SHLIB_EXT}']\"",
    "python -c \"import ctypes; ctypes.cdll[r'${PREFIX}/lib/libfftw3f_threads${SHLIB_EXT}']\"",
    "python -c \"import ctypes; ctypes.cdll[r'${PREFIX}/lib/libfftw3l${SHLIB_EXT}']\"",
    "python -c \"import ctypes; ctypes.cdll[r'${PREFIX}/lib/libfftw3l_threads${SHLIB_EXT}']\"",
    "python -c \"import ctypes; ctypes.cdll[r'${PREFIX}/lib/libfftw3_omp${SHLIB_EXT}']\"",
    "python -c \"import ctypes; ctypes.cdll[r'${PREFIX}/lib/libfftw3f_omp${SHLIB_EXT}']\"",
    "python -c \"import ctypes; ctypes.cdll[r'${PREFIX}/lib/libfftw3l_omp${SHLIB_EXT}']\"",
    "test -f ${PREFIX}/lib/libfftw3_mpi${SHLIB_EXT} || exit 1",
    "test -f ${PREFIX}/lib/libfftw3f_mpi${SHLIB_EXT} || exit 1",
    "test -f ${PREFIX}/lib/libfftw3l_mpi${SHLIB_EXT} || exit 1"
   ],
   "requires": [
    "python"
   ]
  }
 },
 "version": "3.3.8"
}