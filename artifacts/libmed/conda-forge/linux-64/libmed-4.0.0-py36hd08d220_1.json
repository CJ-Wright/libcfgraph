{
 "about": {
  "channels": [
   "conda-forge",
   "defaults",
   "https://conda.anaconda.org/conda-forge"
  ],
  "conda_build_version": "3.19.2",
  "conda_private": false,
  "conda_version": "4.8.3",
  "description": "The purpose of the MED module is to provide a standard for storing and recovering computer data associated to numerical meshes and fields, and to facilitate the exchange between codes and solvers.\n",
  "dev_url": "http://www.salome-platform.org/",
  "doc_url": "http://www.salome-platform.org/",
  "env_vars": {
   "CIO_TEST": "<not set>"
  },
  "extra": {
   "copy_test_source_files": true,
   "final": true,
   "recipe-maintainers": [
    "looooo",
    "ldallolio-irt"
   ]
  },
  "home": "https://www.salome-platform.org/user-section/about/med",
  "identifiers": [],
  "keywords": [],
  "license": "LGPLv3.0",
  "license_family": "LGPL",
  "license_file": "COPYING",
  "root_pkgs": [
   "clyent 1.2.2 py_1",
   "expat 2.2.9 he1b5a44_2",
   "setuptools 46.1.3 py37hc8dfbb8_0",
   "chardet 3.0.4 py37hc8dfbb8_1006",
   "libffi 3.2.1 he1b5a44_1007",
   "libiconv 1.15 h516909a_1006",
   "anaconda-client 1.7.2 py_0",
   "ca-certificates 2020.4.5.1 hecc5488_0",
   "ruamel_yaml 0.15.80 py37h8f50634_1001",
   "pysocks 1.7.1 py37hc8dfbb8_1",
   "libarchive 3.3.3 h3a8160c_1008",
   "tini 0.18.0 h14c3975_1001",
   "filelock 3.0.10 py_0",
   "patch 2.7.6 h14c3975_1001",
   "python_abi 3.7 1_cp37m",
   "perl 5.26.2 h516909a_1006",
   "pip 20.0.2 py_2",
   "icu 64.2 he1b5a44_1",
   "pcre 8.44 he1b5a44_0",
   "readline 8.0 hf8c457e_0",
   "decorator 4.4.2 py_0",
   "glob2 0.7 py_0",
   "pyyaml 5.3.1 py37h8f50634_0",
   "ld_impl_linux-64 2.34 h53a641e_0",
   "importlib_metadata 1.6.0 0",
   "six 1.14.0 py_1",
   "libgomp 9.2.0 h24d8f2e_2",
   "wheel 0.34.2 py_1",
   "ripgrep 12.0.1 h516909a_1",
   "ncurses 6.1 hf484d3e_1002",
   "krb5 1.17.1 h2fd8d38_0",
   "cffi 1.14.0 py37hd463f26_0",
   "python-dateutil 2.8.1 py_0",
   "pycosat 0.6.3 py37h8f50634_1004",
   "psutil 5.7.0 py37h8f50634_1",
   "pyrsistent 0.16.0 py37h8f50634_0",
   "urllib3 1.25.8 py37hc8dfbb8_1",
   "pkginfo 1.5.0.1 py_0",
   "pyopenssl 19.1.0 py_1",
   "pycparser 2.20 py_0",
   "python-libarchive-c 2.9 py37_0",
   "libedit 3.1.20170329 hf8c457e_1001",
   "ipython_genutils 0.2.0 py_1",
   "requests 2.23.0 pyh8c360ce_2",
   "tqdm 4.45.0 pyh9f0ad1d_0",
   "libgcc-ng 9.2.0 h24d8f2e_2",
   "jinja2 2.11.2 pyh9f0ad1d_0",
   "markupsafe 1.1.1 py37h8f50634_1",
   "bzip2 1.0.8 h516909a_2",
   "xz 5.2.5 h516909a_0",
   "conda-build 3.19.2 py37hc8dfbb8_0",
   "jupyter_core 4.6.3 py37hc8dfbb8_1",
   "git 2.26.1 pl526h5e3e691_0",
   "soupsieve 1.9.4 py37hc8dfbb8_1",
   "pytz 2019.3 py_0",
   "lzo 2.10 h14c3975_1000",
   "importlib-metadata 1.6.0 py37hc8dfbb8_0",
   "conda 4.8.3 py37hc8dfbb8_1",
   "liblief 0.9.0 hf8a498c_1",
   "libssh2 1.8.2 h22169c7_2",
   "gettext 0.19.8.1 hc5be6a0_1002",
   "python 3.7.6 h8356626_5_cpython",
   "attrs 19.3.0 py_0",
   "_openmp_mutex 4.5 0_gnu",
   "zstd 1.4.4 h6597ccf_3",
   "py-lief 0.9.0 py37he1b5a44_1",
   "traitlets 4.3.3 py37hc8dfbb8_1",
   "patchelf 0.10 he1b5a44_0",
   "libstdcxx-ng 9.2.0 hdf63c60_2",
   "jsonschema 3.2.0 py37hc8dfbb8_1",
   "beautifulsoup4 4.9.0 py37hc8dfbb8_0",
   "sqlite 3.30.1 hcee41ef_0",
   "libxml2 2.9.10 hee79883_0",
   "cryptography 2.8 py37hb09aad4_2",
   "nbformat 5.0.4 py_0",
   "openssl 1.1.1f h516909a_0",
   "libcurl 7.69.1 hf7181ac_0",
   "zlib 1.2.11 h516909a_1006",
   "idna 2.9 py_1",
   "_libgcc_mutex 0.1 conda_forge",
   "yaml 0.2.3 h516909a_0",
   "curl 7.69.1 h33f0ec9_0",
   "su-exec 0.2 h14c3975_1001",
   "tk 8.6.10 hed695b0_0",
   "zipp 3.1.0 py_0",
   "certifi 2020.4.5.1 py37hc8dfbb8_0",
   "conda-package-handling 1.6.0 py37h8f50634_2",
   "lz4-c 1.9.2 he1b5a44_0",
   "conda-env 2.6.0 1",
   "conda-forge-ci-setup 2.8.3 py37hc8dfbb8_0",
   "click 7.1.1 pyh8c360ce_0"
  ],
  "summary": "MED : interoperable format for data interchange between mesh based solvers.",
  "tags": []
 },
 "conda_build_config": {
  "CI": "azure",
  "c_compiler": "gcc",
  "c_compiler_version": "7",
  "channel_sources": "conda-forge,defaults",
  "channel_targets": "conda-forge main",
  "cpu_optimization_target": "nocona",
  "cran_mirror": "https://cran.r-project.org",
  "cxx_compiler": "gxx",
  "cxx_compiler_version": "7",
  "docker_image": "condaforge/linux-anvil-comp7",
  "extend_keys": [
   "extend_keys",
   "ignore_version",
   "pin_run_as_build",
   "ignore_build_only_deps"
  ],
  "fortran_compiler": "gfortran",
  "fortran_compiler_version": "7",
  "ignore_build_only_deps": [
   "python",
   "numpy"
  ],
  "lua": "5",
  "numpy": "1.11",
  "perl": "5.26.0",
  "pin_run_as_build": {
   "python": {
    "max_pin": "x.x",
    "min_pin": "x.x"
   },
   "r-base": {
    "max_pin": "x.x",
    "min_pin": "x.x"
   },
   "zlib": {
    "max_pin": "x.x"
   }
  },
  "python": "3.6.* *_cpython",
  "r_base": "3.5",
  "target_platform": "linux-64",
  "zlib": "1.2"
 },
 "files": [
  "bin/mdump",
  "bin/mdump2",
  "bin/mdump3",
  "bin/medconforme",
  "bin/medimport",
  "bin/testc/test1",
  "bin/testc/test10",
  "bin/testc/test10_f32",
  "bin/testc/test10_f32_i32",
  "bin/testc/test10_f32_i64",
  "bin/testc/test10_i32",
  "bin/testc/test10_i64",
  "bin/testc/test10_mem",
  "bin/testc/test11",
  "bin/testc/test11b",
  "bin/testc/test12",
  "bin/testc/test13",
  "bin/testc/test14",
  "bin/testc/test15",
  "bin/testc/test16",
  "bin/testc/test17",
  "bin/testc/test18",
  "bin/testc/test2",
  "bin/testc/test20",
  "bin/testc/test21",
  "bin/testc/test22",
  "bin/testc/test23",
  "bin/testc/test24",
  "bin/testc/test25",
  "bin/testc/test26",
  "bin/testc/test27",
  "bin/testc/test28",
  "bin/testc/test29",
  "bin/testc/test3",
  "bin/testc/test30",
  "bin/testc/test31",
  "bin/testc/test32",
  "bin/testc/test33",
  "bin/testc/test4",
  "bin/testc/test5",
  "bin/testc/test6",
  "bin/testc/test7",
  "bin/testc/test8",
  "bin/testc/test9",
  "bin/testf/test1",
  "bin/testf/test10",
  "bin/testf/test10_f32",
  "bin/testf/test10_f32_i32",
  "bin/testf/test10_f32_i64",
  "bin/testf/test10_i32",
  "bin/testf/test10_i64",
  "bin/testf/test10f",
  "bin/testf/test12",
  "bin/testf/test13",
  "bin/testf/test14",
  "bin/testf/test15",
  "bin/testf/test16",
  "bin/testf/test17",
  "bin/testf/test18",
  "bin/testf/test2",
  "bin/testf/test21",
  "bin/testf/test22",
  "bin/testf/test23",
  "bin/testf/test24",
  "bin/testf/test25",
  "bin/testf/test26",
  "bin/testf/test27",
  "bin/testf/test28",
  "bin/testf/test29",
  "bin/testf/test3",
  "bin/testf/test30",
  "bin/testf/test31",
  "bin/testf/test32",
  "bin/testf/test33",
  "bin/testf/test4",
  "bin/testf/test5",
  "bin/testf/test6",
  "bin/testf/test7",
  "bin/testf/test8",
  "bin/testf/test9",
  "bin/testpy/UseCase_MEDinterp_1.py",
  "bin/testpy/UseCase_MEDinterp_2.py",
  "bin/testpy/UseCase_MEDinterp_3.py",
  "bin/testpy/test1.py",
  "bin/testpy/test12.py",
  "bin/testpy/test13.py",
  "bin/testpy/test2.py",
  "bin/testpy/test21.py",
  "bin/testpy/test22.py",
  "bin/testpy/test23.py",
  "bin/testpy/test24.py",
  "bin/testpy/test27.py",
  "bin/testpy/test28.py",
  "bin/testpy/test29.py",
  "bin/testpy/test3.py",
  "bin/testpy/test30.py",
  "bin/testpy/test4.py",
  "bin/testpy/test5.py",
  "bin/testpy/test6.py",
  "bin/testpy/test7.py",
  "bin/testpy/test8.py",
  "bin/testpy/test9.py",
  "bin/testpy/test_medfile.py",
  "bin/testpy/test_medmesh.py",
  "bin/xmdump",
  "bin/xmdump2",
  "bin/xmdump3",
  "include/2.3.6/MEDerreur.hxx",
  "include/2.3.6/med.h",
  "include/2.3.6/med.hf",
  "include/2.3.6/med23v30.h",
  "include/2.3.6/med23v30_proto.h",
  "include/2.3.6/medC_win_dll.h",
  "include/2.3.6/med_exit_if.h",
  "include/2.3.6/med_proto.h",
  "include/2.3.6/med_utils.h",
  "include/MEDerreur.hxx",
  "include/MEDimport.h",
  "include/MEDimport.hxx",
  "include/med.h",
  "include/med.hf",
  "include/med.hf77",
  "include/med.hf90",
  "include/medC_win_dll.h",
  "include/med_err.h",
  "include/med_exit_if.h",
  "include/med_parameter.hf",
  "include/med_proto.h",
  "include/med_utils.h",
  "include/medequivalence.h",
  "include/medfamily.h",
  "include/medfield.h",
  "include/medfile.h",
  "include/medfilter.h",
  "include/medimport_win_dll.h",
  "include/medimportcxx_win_dll.h",
  "include/medinterp.h",
  "include/medlibrary.h",
  "include/medlink.h",
  "include/medlocalization.h",
  "include/medmesh.h",
  "include/medparameter.h",
  "include/medprofile.h",
  "include/medstructelement.h",
  "include/medsubdomain.h",
  "lib/libmed.so",
  "lib/libmed.so.11.0.0",
  "lib/libmedC.so",
  "lib/libmedC.so.11.0.0",
  "lib/libmedfwrap.so",
  "lib/libmedfwrap.so.11.0.0",
  "lib/libmedimport.so",
  "lib/libmedimport.so.0.3.0",
  "lib/python3.6/site-packages/med/__init__.py",
  "lib/python3.6/site-packages/med/_medenum.so",
  "lib/python3.6/site-packages/med/_medenumtest.so",
  "lib/python3.6/site-packages/med/_medequivalence.so",
  "lib/python3.6/site-packages/med/_medfamily.so",
  "lib/python3.6/site-packages/med/_medfield.so",
  "lib/python3.6/site-packages/med/_medfile.so",
  "lib/python3.6/site-packages/med/_medfilter.so",
  "lib/python3.6/site-packages/med/_medinterp.so",
  "lib/python3.6/site-packages/med/_medlibrary.so",
  "lib/python3.6/site-packages/med/_medlink.so",
  "lib/python3.6/site-packages/med/_medlocalization.so",
  "lib/python3.6/site-packages/med/_medmesh.so",
  "lib/python3.6/site-packages/med/_medparameter.so",
  "lib/python3.6/site-packages/med/_medprofile.so",
  "lib/python3.6/site-packages/med/_medstructelement.so",
  "lib/python3.6/site-packages/med/_medsubdomain.so",
  "lib/python3.6/site-packages/med/medenum.py",
  "lib/python3.6/site-packages/med/medenumtest.py",
  "lib/python3.6/site-packages/med/medequivalence.py",
  "lib/python3.6/site-packages/med/medfamily.py",
  "lib/python3.6/site-packages/med/medfield.py",
  "lib/python3.6/site-packages/med/medfile.py",
  "lib/python3.6/site-packages/med/medfilter.py",
  "lib/python3.6/site-packages/med/medinterp.py",
  "lib/python3.6/site-packages/med/medlibrary.py",
  "lib/python3.6/site-packages/med/medlink.py",
  "lib/python3.6/site-packages/med/medlocalization.py",
  "lib/python3.6/site-packages/med/medmesh.py",
  "lib/python3.6/site-packages/med/medparameter.py",
  "lib/python3.6/site-packages/med/medprofile.py",
  "lib/python3.6/site-packages/med/medstructelement.py",
  "lib/python3.6/site-packages/med/medsubdomain.py",
  "share/cmake/med-fichier-4.0.0/MEDFileConfig.cmake",
  "share/cmake/med-fichier-4.0.0/MEDFileConfigVersion.cmake",
  "share/cmake/med-fichier-4.0.0/MEDFileTargets-release.cmake",
  "share/cmake/med-fichier-4.0.0/MEDFileTargets.cmake"
 ],
 "index": {
  "arch": "x86_64",
  "build": "py36hd08d220_1",
  "build_number": 1,
  "depends": [
   "hdf5 1.10.3|1.10.4",
   "hdf5 >=1.10.4,<1.10.5.0a0",
   "libgcc-ng >=7.3.0",
   "libgfortran-ng >=7,<8.0a0",
   "libstdcxx-ng >=7.3.0",
   "python >=3.6,<3.7.0a0",
   "python_abi 3.6.* *_cp36m",
   "zlib >=1.2.11,<1.3.0a0"
  ],
  "license": "LGPLv3.0",
  "license_family": "LGPL",
  "name": "libmed",
  "platform": "linux",
  "subdir": "linux-64",
  "timestamp": 1587058217640,
  "version": "4.0.0"
 },
 "metadata_version": 1,
 "name": "libmed",
 "raw_recipe": "{% set name = \"libmed\" %}\n{% set version = \"4.0.0\" %}\n{% set sha256 = \"a474e90b5882ce69c5e9f66f6359c53b8b73eb448c5f631fa96e8cd2c14df004\" %}\n\n\npackage:\n    name: libmed\n    version: 4.0.0\n\nsource:\n    fn: {{ name }} {{ version }}.tar.gz\n    url: https://files.salome-platform.org/Salome/other/med-{{ version }}.tar.gz\n    sha256: {{ sha256  }}\n    #git_url: https://salsa.debian.org/science-team/med-fichier\n    #git_rev: 8a0b0d21d4bac79772797b0a800cf4d5bf77bc32    \n\nbuild:\n    number: 1\n    skip: True  # [py2k or osx or win]\n\nrequirements:\n    build:\n        - ninja\n        - cmake\n        - {{ compiler('fortran') }}\n        - {{ compiler('c') }}\n        - {{ compiler('cxx') }}\n    host:\n        - hdf5 1.10.3|1.10.4\n        - zlib\n        - python\n        - swig\n    run:\n        - hdf5 1.10.3|1.10.4\n        - zlib\n        - python\n\n\ntest:\n    imports:\n        - med\n\nabout:\n    home: https://www.salome-platform.org/user-section/about/med\n    license: LGPLv3.0\n    license_family: LGPL\n    license_file: COPYING\n    summary: 'MED : interoperable format for data interchange between mesh based solvers.'\n    description: |\n        The purpose of the MED module is to provide a standard for storing and recovering computer data associated to numerical meshes and fields, and to facilitate the exchange between codes and solvers.\n    doc_url: http://www.salome-platform.org/\n    dev_url: http://www.salome-platform.org/\n\nextra:\n    recipe-maintainers:\n        - looooo\n        - ldallolio-irt\n",
 "rendered_recipe": {
  "about": {
   "description": "The purpose of the MED module is to provide a standard for storing and recovering computer data associated to numerical meshes and fields, and to facilitate the exchange between codes and solvers.\n",
   "dev_url": "http://www.salome-platform.org/",
   "doc_url": "http://www.salome-platform.org/",
   "home": "https://www.salome-platform.org/user-section/about/med",
   "license": "LGPLv3.0",
   "license_family": "LGPL",
   "license_file": "COPYING",
   "summary": "MED : interoperable format for data interchange between mesh based solvers."
  },
  "build": {
   "number": "1",
   "string": "py36hd08d220_1"
  },
  "extra": {
   "copy_test_source_files": true,
   "final": true,
   "recipe-maintainers": [
    "ldallolio-irt",
    "looooo"
   ]
  },
  "package": {
   "name": "libmed",
   "version": "4.0.0"
  },
  "requirements": {
   "build": [
    "_libgcc_mutex 0.1 conda_forge",
    "_openmp_mutex 4.5 0_gnu",
    "binutils_impl_linux-64 2.34 h53a641e_0",
    "binutils_linux-64 2.34 hc952b39_18",
    "bzip2 1.0.8 h516909a_2",
    "ca-certificates 2020.4.5.1 hecc5488_0",
    "cmake 3.17.0 h28c56e5_0",
    "expat 2.2.9 he1b5a44_2",
    "gcc_impl_linux-64 7.3.0 hd420e75_5",
    "gcc_linux-64 7.3.0 h553295d_18",
    "gfortran_impl_linux-64 7.3.0 hdf63c60_5",
    "gfortran_linux-64 7.3.0 h553295d_18",
    "gxx_impl_linux-64 7.3.0 hdf63c60_5",
    "gxx_linux-64 7.3.0 h553295d_18",
    "krb5 1.17.1 h2fd8d38_0",
    "ld_impl_linux-64 2.34 h53a641e_0",
    "libcurl 7.69.1 hf7181ac_0",
    "libedit 3.1.20170329 hf8c457e_1001",
    "libgcc-ng 9.2.0 h24d8f2e_2",
    "libgfortran-ng 7.3.0 hdf63c60_5",
    "libgomp 9.2.0 h24d8f2e_2",
    "libssh2 1.8.2 h22169c7_2",
    "libstdcxx-ng 9.2.0 hdf63c60_2",
    "libuv 1.34.0 h516909a_0",
    "ncurses 6.1 hf484d3e_1002",
    "ninja 1.10.0 hc9558a2_0",
    "openssl 1.1.1f h516909a_0",
    "rhash 1.3.6 h14c3975_1001",
    "tk 8.6.10 hed695b0_0",
    "xz 5.2.5 h516909a_0",
    "zlib 1.2.11 h516909a_1006"
   ],
   "host": [
    "_libgcc_mutex 0.1 conda_forge",
    "_openmp_mutex 4.5 0_gnu",
    "ca-certificates 2020.4.5.1 hecc5488_0",
    "hdf5 1.10.4 nompi_h3c11f04_1106",
    "ld_impl_linux-64 2.34 h53a641e_0",
    "libffi 3.2.1 he1b5a44_1007",
    "libgcc-ng 9.2.0 h24d8f2e_2",
    "libgfortran-ng 7.3.0 hdf63c60_5",
    "libgomp 9.2.0 h24d8f2e_2",
    "libstdcxx-ng 9.2.0 hdf63c60_2",
    "ncurses 6.1 hf484d3e_1002",
    "openssl 1.1.1f h516909a_0",
    "pcre 8.44 he1b5a44_0",
    "python 3.6.10 h8356626_1010_cpython",
    "readline 8.0 hf8c457e_0",
    "sqlite 3.30.1 hcee41ef_0",
    "swig 4.0.1 he1b5a44_0",
    "tk 8.6.10 hed695b0_0",
    "xz 5.2.5 h516909a_0",
    "zlib 1.2.11 h516909a_1006"
   ],
   "run": [
    "hdf5 1.10.3|1.10.4",
    "hdf5 >=1.10.4,<1.10.5.0a0",
    "libgcc-ng >=7.3.0",
    "libgfortran-ng >=7,<8.0a0",
    "libstdcxx-ng >=7.3.0",
    "python >=3.6,<3.7.0a0",
    "python_abi 3.6.* *_cp36m",
    "zlib >=1.2.11,<1.3.0a0",
    "zlib >=1.2.11,<1.3.0a0"
   ]
  },
  "source": {
   "fn": "libmed 4.0.0.tar.gz",
   "sha256": "a474e90b5882ce69c5e9f66f6359c53b8b73eb448c5f631fa96e8cd2c14df004",
   "url": "https://files.salome-platform.org/Salome/other/med-4.0.0.tar.gz"
  },
  "test": {
   "imports": [
    "med"
   ]
  }
 },
 "version": "4.0.0"
}