{
 "about": {
  "channels": [
   "conda-forge",
   "defaults"
  ],
  "conda_build_version": "3.18.9",
  "conda_private": false,
  "conda_version": "4.7.11",
  "description": "The Adaptive scheduler solves the following problem, you need to run a few 100\nlearners and can use >1k cores. `ipyparallel` and `dask.distributed` provide\nvery powerful engines for interactive sessions. However, when you want to\nconnect to >1k cores it starts to struggle. Besides that, on a shared cluster\nthere is often the problem of starting an interactive session with ample space\navailable. Our approach is to schedule a different job for each `\nadaptive.Learner`. The creation and running of these jobs are managed by `\nadaptive-scheduler`. This means that your calculation will definitely run, even\nthough the cluster might be fully occupied at the moment. Because of this\napproach, there is almost no limit to how many cores you want to use. You can\neither use 10 nodes for 1 job (`learner`) or 1 core for 1 job (`learner`) while\nscheduling hundreds of jobs. Everything is written such that the computation is\nmaximally local. This means that is one of the jobs crashes, there is no\nproblem and it will automatically schedule a new one and continue the\ncalculation where it left off (because of Adaptive's periodic saving\nfunctionality). Even if the central \"job manager\" dies, the jobs will continue\nto run (although no new jobs will be scheduled.)\n",
  "dev_url": "https://github.com/basnijholt/adaptive-scheduler",
  "doc_url": "http://adaptive-scheduler.readthedocs.io",
  "env_vars": {
   "CIO_TEST": "<not set>"
  },
  "extra": {
   "copy_test_source_files": true,
   "final": true,
   "recipe-maintainers": [
    "basnijholt"
   ]
  },
  "home": "http://github.com/basnijholt/adaptive-scheduler",
  "identifiers": [],
  "keywords": [],
  "license": "BSD-3-Clause",
  "license_family": "BSD",
  "license_file": "LICENSE",
  "root_pkgs": [
   "tini 0.18.0 h14c3975_1001",
   "git 2.23.0 pl526hce37bd2_0",
   "perl 5.26.2 h516909a_1006",
   "ripgrep 11.0.2 0",
   "jupyter_core 4.4.0 py_0",
   "yaml 0.1.7 h14c3975_1001",
   "setuptools 41.2.0 py37_0",
   "traitlets 4.3.2 py37_1000",
   "attrs 19.1.0 py_0",
   "cffi 1.12.3 py37h8022711_0",
   "expat 2.2.5 he1b5a44_1003",
   "certifi 2019.6.16 py37_1",
   "psutil 5.6.3 py37h516909a_0",
   "pytz 2019.2 py_0",
   "liblief 0.9.0 hf8a498c_1",
   "tk 8.6.9 hed695b0_1002",
   "patch 2.7.6 h14c3975_1001",
   "libffi 3.2.1 he1b5a44_1006",
   "python-dateutil 2.8.0 py_0",
   "urllib3 1.25.3 py37_0",
   "wheel 0.33.6 py37_0",
   "pyyaml 5.1.2 py37h516909a_0",
   "glob2 0.7 py_0",
   "libarchive 3.3.3 hb44662c_1005",
   "libssh2 1.8.2 h22169c7_2",
   "bzip2 1.0.8 h516909a_0",
   "zlib 1.2.11 h516909a_1005",
   "lz4-c 1.8.3 he1b5a44_1001",
   "ipython_genutils 0.2.0 py_1",
   "libgcc-ng 9.1.0 hdf63c60_0",
   "ca-certificates 2019.6.16 hecc5488_0",
   "pkginfo 1.5.0.1 py_0",
   "jinja2 2.10.1 py_0",
   "xz 5.2.4 h14c3975_1001",
   "gosu 1.10 h81701ea_1001",
   "zstd 1.4.0 h3b9ef0a_0",
   "pysocks 1.7.0 py37_0",
   "soupsieve 1.9.3 py37_0",
   "python-libarchive-c 2.8 py37_1004",
   "ruamel_yaml 0.15.71 py37h14c3975_1000",
   "asn1crypto 0.24.0 py37_1003",
   "py-lief 0.9.0 py37he1b5a44_1",
   "_libgcc_mutex 0.1 main",
   "sqlite 3.29.0 hcee41ef_1",
   "requests 2.22.0 py37_1",
   "pycparser 2.19 py37_1",
   "libstdcxx-ng 9.1.0 hdf63c60_0",
   "chardet 3.0.4 py37_1003",
   "libcurl 7.65.3 hda55be3_0",
   "ncurses 6.1 hf484d3e_1002",
   "jsonschema 3.0.2 py37_0",
   "conda-build 3.18.9 py37_3",
   "libedit 3.1.20170329 hf8c457e_1001",
   "pyopenssl 19.0.0 py37_0",
   "filelock 3.0.10 py_0",
   "readline 8.0 hf8c457e_0",
   "libxml2 2.9.9 hee79883_5",
   "conda 4.7.11 py37_0",
   "conda-package-handling 1.4.1 py37_0",
   "python 3.7.3 h33d41f4_1",
   "pip 19.2.3 py37_0",
   "idna 2.8 py37_1000",
   "pycosat 0.6.3 py37h14c3975_1001",
   "krb5 1.16.3 h05b26f9_1001",
   "six 1.12.0 py37_1000",
   "clyent 1.2.2 py_1",
   "icu 64.2 he1b5a44_1",
   "lzo 2.10 h14c3975_1000",
   "libiconv 1.15 h516909a_1005",
   "pyrsistent 0.15.4 py37h516909a_0",
   "curl 7.65.3 hf8cf82a_0",
   "patchelf 0.10 he1b5a44_0",
   "beautifulsoup4 4.8.0 py37_0",
   "tqdm 4.35.0 py_0",
   "anaconda-client 1.7.2 py_0",
   "decorator 4.4.0 py_0",
   "gettext 0.19.8.1 hc5be6a0_1002",
   "cryptography 2.7 py37h72c5cf5_0",
   "openssl 1.1.1c h516909a_0",
   "nbformat 4.4.0 py_1",
   "markupsafe 1.1.1 py37h14c3975_0",
   "conda-env 2.6.0 1",
   "click 7.0 py_0",
   "conda-forge-ci-setup 2.4.0 py37_0"
  ],
  "summary": "An asynchronous scheduler for Adaptive",
  "tags": []
 },
 "conda_build_config": {
  "CI": "azure",
  "c_compiler": "gcc",
  "channel_sources": "conda-forge,defaults",
  "channel_targets": "conda-forge main",
  "cpu_optimization_target": "nocona",
  "cran_mirror": "https://cran.r-project.org",
  "cxx_compiler": "gxx",
  "docker_image": "condaforge/linux-anvil-comp7",
  "extend_keys": [
   "extend_keys",
   "ignore_build_only_deps",
   "ignore_version",
   "pin_run_as_build"
  ],
  "fortran_compiler": "gfortran",
  "ignore_build_only_deps": [
   "numpy",
   "python"
  ],
  "lua": "5",
  "numpy": "1.11",
  "perl": "5.26.0",
  "pin_run_as_build": {
   "python": {
    "max_pin": "x.x",
    "min_pin": "x.x"
   },
   "r-base": {
    "max_pin": "x.x",
    "min_pin": "x.x"
   }
  },
  "python": "3.7",
  "r_base": "3.5",
  "target_platform": "linux-64"
 },
 "files": [
  "lib/python3.7/site-packages/adaptive_scheduler-0.5.1.dist-info/INSTALLER",
  "lib/python3.7/site-packages/adaptive_scheduler-0.5.1.dist-info/LICENSE",
  "lib/python3.7/site-packages/adaptive_scheduler-0.5.1.dist-info/METADATA",
  "lib/python3.7/site-packages/adaptive_scheduler-0.5.1.dist-info/RECORD",
  "lib/python3.7/site-packages/adaptive_scheduler-0.5.1.dist-info/WHEEL",
  "lib/python3.7/site-packages/adaptive_scheduler/__init__.py",
  "lib/python3.7/site-packages/adaptive_scheduler/_mock_scheduler.py",
  "lib/python3.7/site-packages/adaptive_scheduler/_static_version.py",
  "lib/python3.7/site-packages/adaptive_scheduler/_version.py",
  "lib/python3.7/site-packages/adaptive_scheduler/client_support.py",
  "lib/python3.7/site-packages/adaptive_scheduler/scheduler.py",
  "lib/python3.7/site-packages/adaptive_scheduler/sequence_learner.py",
  "lib/python3.7/site-packages/adaptive_scheduler/server_support.py",
  "lib/python3.7/site-packages/adaptive_scheduler/utils.py"
 ],
 "index": {
  "arch": "x86_64",
  "build": "py37_0",
  "build_number": 0,
  "depends": [
   "adaptive",
   "dill",
   "ipyparallel",
   "mpi4py",
   "mpich",
   "pandas",
   "psutil",
   "python >=3.7,<3.8.0a0",
   "pyzmq",
   "structlog",
   "tinydb",
   "toolz",
   "tqdm"
  ],
  "license": "BSD-3-Clause",
  "license_family": "BSD",
  "name": "adaptive-scheduler",
  "platform": "linux",
  "subdir": "linux-64",
  "timestamp": 1567531591334,
  "version": "0.5.1"
 },
 "metadata_version": 1,
 "name": "adaptive-scheduler",
 "raw_recipe": "{% set name = \"adaptive-scheduler\" %}\n{% set version = \"0.5.1\" %}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/adaptive_scheduler-{{ version }}.tar.gz\n  sha256: cf8280ae5e967c61afe2c9fe16949efae13f1b3e3f36e3eac6cbb5422cfdbc3e\n\nbuild:\n  number: 0\n  skip: True  # [win]\n  skip: True  # [py<37]\n  script: \"{{ PYTHON }} -m pip install . --no-deps -vv\"\n\nrequirements:\n  host:\n    - python\n    - pip\n  run:\n    - python\n    - adaptive\n    - dill\n    - ipyparallel\n    - mpich\n    - mpi4py\n    - pandas\n    - psutil\n    - pyzmq\n    - structlog\n    - tinydb\n    - toolz\n    - tqdm\n    - pyzmq\n\ntest:\n  imports:\n    - adaptive_scheduler\n\nabout:\n  home: http://github.com/basnijholt/adaptive-scheduler\n  license: BSD-3-Clause\n  license_family: BSD\n  license_file: LICENSE\n  summary: 'An asynchronous scheduler for Adaptive'\n  description: |\n    The Adaptive scheduler solves the following problem, you need to run a few 100 \n    learners and can use >1k cores. `ipyparallel` and `dask.distributed` provide \n    very powerful engines for interactive sessions. However, when you want to \n    connect to >1k cores it starts to struggle. Besides that, on a shared cluster \n    there is often the problem of starting an interactive session with ample space \n    available. Our approach is to schedule a different job for each `\n    adaptive.Learner`. The creation and running of these jobs are managed by `\n    adaptive-scheduler`. This means that your calculation will definitely run, even \n    though the cluster might be fully occupied at the moment. Because of this \n    approach, there is almost no limit to how many cores you want to use. You can \n    either use 10 nodes for 1 job (`learner`) or 1 core for 1 job (`learner`) while \n    scheduling hundreds of jobs. Everything is written such that the computation is \n    maximally local. This means that is one of the jobs crashes, there is no \n    problem and it will automatically schedule a new one and continue the \n    calculation where it left off (because of Adaptive's periodic saving \n    functionality). Even if the central \"job manager\" dies, the jobs will continue \n    to run (although no new jobs will be scheduled.) \n  doc_url: http://adaptive-scheduler.readthedocs.io\n  dev_url: https://github.com/basnijholt/adaptive-scheduler\n\nextra:\n  recipe-maintainers:\n    - basnijholt\n",
 "rendered_recipe": {
  "about": {
   "description": "The Adaptive scheduler solves the following problem, you need to run a few 100\nlearners and can use >1k cores. `ipyparallel` and `dask.distributed` provide\nvery powerful engines for interactive sessions. However, when you want to\nconnect to >1k cores it starts to struggle. Besides that, on a shared cluster\nthere is often the problem of starting an interactive session with ample space\navailable. Our approach is to schedule a different job for each `\nadaptive.Learner`. The creation and running of these jobs are managed by `\nadaptive-scheduler`. This means that your calculation will definitely run, even\nthough the cluster might be fully occupied at the moment. Because of this\napproach, there is almost no limit to how many cores you want to use. You can\neither use 10 nodes for 1 job (`learner`) or 1 core for 1 job (`learner`) while\nscheduling hundreds of jobs. Everything is written such that the computation is\nmaximally local. This means that is one of the jobs crashes, there is no\nproblem and it will automatically schedule a new one and continue the\ncalculation where it left off (because of Adaptive's periodic saving\nfunctionality). Even if the central \"job manager\" dies, the jobs will continue\nto run (although no new jobs will be scheduled.)\n",
   "dev_url": "https://github.com/basnijholt/adaptive-scheduler",
   "doc_url": "http://adaptive-scheduler.readthedocs.io",
   "home": "http://github.com/basnijholt/adaptive-scheduler",
   "license": "BSD-3-Clause",
   "license_family": "BSD",
   "license_file": "LICENSE",
   "summary": "An asynchronous scheduler for Adaptive"
  },
  "build": {
   "number": "0",
   "script": "/home/conda/feedstock_root/build_artifacts/adaptive-scheduler_1567531351536/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pl/bin/python -m pip install . --no-deps -vv",
   "string": "py37_0"
  },
  "extra": {
   "copy_test_source_files": true,
   "final": true,
   "recipe-maintainers": [
    "basnijholt"
   ]
  },
  "package": {
   "name": "adaptive-scheduler",
   "version": "0.5.1"
  },
  "requirements": {
   "host": [
    "_libgcc_mutex 0.1 main",
    "bzip2 1.0.8 h516909a_0",
    "ca-certificates 2019.6.16 hecc5488_0",
    "certifi 2019.6.16 py37_1",
    "libffi 3.2.1 he1b5a44_1006",
    "libgcc-ng 9.1.0 hdf63c60_0",
    "libstdcxx-ng 9.1.0 hdf63c60_0",
    "ncurses 6.1 hf484d3e_1002",
    "openssl 1.1.1c h516909a_0",
    "pip 19.2.3 py37_0",
    "python 3.7.3 h33d41f4_1",
    "readline 8.0 hf8c457e_0",
    "setuptools 41.2.0 py37_0",
    "sqlite 3.29.0 hcee41ef_1",
    "tk 8.6.9 hed695b0_1002",
    "wheel 0.33.6 py37_0",
    "xz 5.2.4 h14c3975_1001",
    "zlib 1.2.11 h516909a_1005"
   ],
   "run": [
    "adaptive",
    "dill",
    "ipyparallel",
    "mpi4py",
    "mpich",
    "pandas",
    "psutil",
    "python >=3.7,<3.8.0a0",
    "pyzmq",
    "structlog",
    "tinydb",
    "toolz",
    "tqdm"
   ]
  },
  "source": {
   "sha256": "cf8280ae5e967c61afe2c9fe16949efae13f1b3e3f36e3eac6cbb5422cfdbc3e",
   "url": "https://pypi.io/packages/source/a/adaptive-scheduler/adaptive_scheduler-0.5.1.tar.gz"
  },
  "test": {
   "imports": [
    "adaptive_scheduler"
   ]
  }
 },
 "version": "0.5.1"
}