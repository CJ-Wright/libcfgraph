{
 "about": {
  "channels": [
   "conda-forge",
   "defaults",
   "https://conda.anaconda.org/conda-forge"
  ],
  "conda_build_version": "3.19.2",
  "conda_private": false,
  "conda_version": "4.8.3",
  "description": "Almost everything in ROOT should be supported in this Conda package; ROOT was built with lots of options turned\non. Here are a few things to try:\n\n* `root`: you can start up a session and see the splash screen; Control-D to exit.\n* `python` followed by `import ROOT` will load PyROOT.\n* `root --notebook` will start a notebook server with a ROOT kernel choice.\n* `rootbrowse` will open a TBrowser session so you can look through files.\n* `root -l -q $ROOTSYS/tutorials/dataframe/df013_InspectAnalysis.C` will run a DataFrame example with an animated plot.\n* `root -b -q -l -n -e \"std::cout << TROOT::GetTutorialDir() << std::endl;\"` will print the tutorial dir.\n* `root -b -l -q -e 'std::cout << (float) TPython::Eval(\"1+1\") << endl;'` will run Python from C++ ROOT.\n\nSee the post [here](https://iscinumpy.gitlab.io/post/root-conda/) for more information about using this Conda package.\n\nThe ROOT package will prepare the required compilers. Everything in Conda is symlinked into\n`$CONDA_PREFIX` if you build things by hand; tools like CMake should find it automatically. The `thisroot.*`\nscripts should not be used and are not provided. Graphics, `rootbrowse`, etc. all should work. OpenGL is enabled.\n\nThere is also a `root_base` package, with minimal dependecies, that libraries should depend on this to avoid\nhaving a runtime dependency on the `compilers` package. `root-dependencies` and `root-binaries` are also available. In most cases users should use the `root` package directly, since it adds both of these, along with compilers, Jupyter, and a few other things to facilitate using ROOT or PyROOT.\n\nROOT was built with and will report `-std=c++17` from `root-config`.\n",
  "dev_url": "https://github.com/root-project/root/",
  "doc_url": "https://root.cern/documentation",
  "env_vars": {
   "CIO_TEST": "<not set>"
  },
  "extra": {
   "copy_test_source_files": true,
   "final": true,
   "recipe-maintainers": [
    "chrisburr",
    "henryiii",
    "eguiraud",
    "egpbos"
   ]
  },
  "home": "https://root.cern/",
  "identifiers": [],
  "keywords": [],
  "license": "LGPL-2.1-only",
  "license_family": "LGPL",
  "license_file": "root-source/LICENSE",
  "root_pkgs": [
   "bzip2 1.0.8 h0b31af3_2",
   "tqdm 4.46.0 pyh9f0ad1d_0",
   "zstd 1.4.4 h4b3e974_3",
   "conda-env 2.6.0 1",
   "chardet 3.0.4 py37hc8dfbb8_1006",
   "jq 1.6 h1de35cc_1000",
   "krb5 1.17.1 h1752a42_0",
   "libffi 3.2.1 h4a8c4bd_1007",
   "anaconda-client 1.7.2 py_0",
   "py-lief 0.9.0 py37h0ceac7d_1",
   "readline 8.0 hcfe32e1_0",
   "libcxx 10.0.0 h1af66ff_2",
   "glob2 0.7 py_0",
   "shyaml 0.6.1 py_0",
   "lz4-c 1.9.2 h4a8c4bd_1",
   "icu 67.1 h4a8c4bd_0",
   "ripgrep 12.1.1 h0b31af3_0",
   "jsonschema 3.2.0 py37hc8dfbb8_1",
   "decorator 4.4.2 py_0",
   "curl 7.69.1 h2d98d24_0",
   "pysocks 1.7.1 py37hc8dfbb8_1",
   "cffi 1.14.0 py37h356ff06_0",
   "libxml2 2.9.10 hc06c4ae_1",
   "libiconv 1.15 h0b31af3_1006",
   "soupsieve 2.0.1 py37hc8dfbb8_0",
   "yaml 0.2.4 h0b31af3_0",
   "brotlipy 0.7.0 py37h9bfed18_1000",
   "conda-build 3.19.2 py37hc8dfbb8_2",
   "libssh2 1.9.0 h39bdce6_2",
   "ca-certificates 2020.4.5.2 hecda079_0",
   "click 7.1.2 pyh9f0ad1d_0",
   "setuptools 46.4.0 py37hc8dfbb8_0",
   "pycparser 2.20 py_0",
   "conda-forge-ci-setup 3.0.14 py37hc8dfbb8_0",
   "tk 8.6.10 hbbe82c9_0",
   "git 2.27.0 pl526hcc376a2_0",
   "beautifulsoup4 4.9.1 py37hc8dfbb8_0",
   "perl 5.26.2 haec8ef5_1006",
   "urllib3 1.25.9 py_0",
   "libedit 3.1.20191231 hed1e85f_0",
   "markupsafe 1.1.1 py37h9bfed18_1",
   "pyopenssl 19.1.0 py_1",
   "pyrsistent 0.16.0 py37h9bfed18_0",
   "zlib 1.2.11 h0b31af3_1006",
   "jupyter_core 4.6.3 py37hc8dfbb8_1",
   "pytz 2020.1 pyh9f0ad1d_0",
   "attrs 19.3.0 py_0",
   "pycosat 0.6.3 py37h9bfed18_1004",
   "libarchive 3.3.3 h02796b4_1008",
   "pip 20.1.1 py_1",
   "python_abi 3.7 1_cp37m",
   "psutil 5.7.0 py37h9bfed18_1",
   "idna 2.9 py_1",
   "pyyaml 5.3.1 py37h9bfed18_0",
   "libcurl 7.69.1 hc0b9707_0",
   "wheel 0.34.2 py_1",
   "jinja2 2.11.2 pyh9f0ad1d_0",
   "openssl 1.1.1g h0b31af3_0",
   "liblief 0.9.0 h3e78482_1",
   "clyent 1.2.2 py_1",
   "nbformat 5.0.6 py_0",
   "pcre 8.44 h4a8c4bd_0",
   "pkginfo 1.5.0.1 py_0",
   "importlib_metadata 1.6.1 0",
   "certifi 2020.4.5.2 py37hc8dfbb8_0",
   "ruamel_yaml 0.15.80 py37h9bfed18_1001",
   "requests 2.23.0 pyh8c360ce_2",
   "zipp 3.1.0 py_0",
   "ncurses 6.1 h0a44026_1002",
   "cryptography 2.9.2 py37he655712_0",
   "gettext 0.19.8.1 h46ab8bc_1002",
   "sqlite 3.30.1 h93121df_0",
   "conda 4.8.3 py37hc8dfbb8_1",
   "ipython_genutils 0.2.0 py_1",
   "lzo 2.10 h1de35cc_1000",
   "oniguruma 6.9.3 h01d97ff_0",
   "python-libarchive-c 2.9 py37_0",
   "xz 5.2.5 h0b31af3_0",
   "python-dateutil 2.8.1 py_0",
   "six 1.15.0 pyh9f0ad1d_0",
   "traitlets 4.3.3 py37hc8dfbb8_1",
   "conda-package-handling 1.6.0 py37h9bfed18_2",
   "python 3.7.6 h90870a6_5_cpython",
   "filelock 3.0.12 pyh9f0ad1d_0",
   "importlib-metadata 1.6.1 py37hc8dfbb8_0",
   "expat 2.2.9 h4a8c4bd_2"
  ],
  "summary": "ROOT is a modular scientific software toolkit. It provides all the functionalities needed to deal with big data\nprocessing, statistical analysis, visualisation and storage. It is mainly written in C++ but integrated with other\nlanguages such as Python and R.\n",
  "tags": []
 },
 "conda_build_config": {
  "CI": "azure",
  "CONDA_BUILD_SYSROOT": "/Applications/Xcode_11.3.1.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.13.sdk",
  "MACOSX_DEPLOYMENT_TARGET": "10.13",
  "c_compiler": "clang",
  "c_compiler_version": "9",
  "cfitsio": "3.470",
  "channel_sources": "conda-forge,defaults",
  "channel_targets": "conda-forge main",
  "cpu_optimization_target": "nocona",
  "cran_mirror": "https://cran.r-project.org",
  "cxx_compiler": "clangxx",
  "cxx_compiler_version": "9",
  "extend_keys": [
   "ignore_build_only_deps",
   "pin_run_as_build",
   "ignore_version",
   "extend_keys"
  ],
  "fftw": "3",
  "fortran_compiler": "gfortran",
  "fortran_compiler_version": "7",
  "freetype": "2.9.1",
  "gdk_pixbuf": "2.36.12",
  "giflib": "5.2",
  "glew": "2.1",
  "graphviz": "2.40",
  "gsl": "2.6",
  "ignore_build_only_deps": [
   "numpy",
   "python"
  ],
  "krb5": "1.16",
  "libblas": "3.8 *netlib",
  "libcblas": "3.8 *netlib",
  "libpng": "1.6",
  "librsvg": "2",
  "libtiff": "4.1.0",
  "libxml2": "2.9",
  "lua": "5",
  "lz4_c": "1.9.2",
  "macos_machine": "x86_64-apple-darwin13.4.0",
  "macos_min_version": "10.9",
  "numpy": "1.14",
  "openssl": "1.1.1",
  "perl": "5.26.0",
  "pin_run_as_build": {
   "fftw": {
    "max_pin": "x"
   },
   "freetype": {
    "max_pin": "x"
   },
   "gdk_pixbuf": {
    "max_pin": "x.x.x"
   },
   "glew": {
    "max_pin": "x.x"
   },
   "graphviz": {
    "max_pin": "x"
   },
   "krb5": {
    "max_pin": "x.x"
   },
   "libpng": {
    "max_pin": "x.x"
   },
   "librsvg": {
    "max_pin": "x"
   },
   "libtiff": {
    "max_pin": "x"
   },
   "libxml2": {
    "max_pin": "x.x"
   },
   "lz4-c": {
    "max_pin": "x.x.x"
   },
   "openssl": {
    "max_pin": "x.x.x"
   },
   "python": {
    "max_pin": "x.x",
    "min_pin": "x.x"
   },
   "r-base": {
    "max_pin": "x.x",
    "min_pin": "x.x"
   },
   "sqlite": {
    "max_pin": "x"
   },
   "xz": {
    "max_pin": "x.x"
   },
   "zlib": {
    "max_pin": "x.x"
   },
   "zstd": {
    "max_pin": "x.x.x"
   }
  },
  "python": "3.8.* *_cpython",
  "r_base": "3.5",
  "sqlite": "3",
  "target_platform": "osx-64",
  "xrootd": "4.12",
  "xz": "5.2",
  "zlib": "1.2",
  "zstd": "1.4.4"
 },
 "files": [],
 "index": {
  "arch": "x86_64",
  "build": "py38hbb65a81_1",
  "build_number": 1,
  "constrains": [
   "__osx >=10.13"
  ],
  "depends": [
   "compilers",
   "libcxx >=9.0.1",
   "libgfortran >=4.0.0,<5.0.0.a0",
   "metakernel",
   "notebook",
   "python >=3.8,<3.9.0a0",
   "python_abi 3.8.* *_cp38",
   "root-binaries 6.22.0 py38hbb65a81_1",
   "root-dependencies 6.22.0 py38hbb65a81_1",
   "root_base 6.22.0 py38h1afb842_1"
  ],
  "license": "LGPL-2.1-only",
  "license_family": "LGPL",
  "name": "root",
  "platform": "osx",
  "subdir": "osx-64",
  "timestamp": 1592259291086,
  "version": "6.22.0"
 },
 "metadata_version": 1,
 "name": "root",
 "raw_recipe": "{% set name = \"root\" %}\n{% set version = \"6.22.0\" %}\n{% set build_number = 1 %}\n{% set clang_version = \"5.0.0\" %}\n{% set clang_patches_version = \"root_20200518\" %}\n\n# WARNING: This is not a good example of a how a conda forge recipe should look\n\n{% macro test_commands() %}\n        - root -l -b -q -x\n        - root -l -b -q -x test.cpp\n        # When testing with -e, explicitly set the return code to zero\n        - root -b -l -q -x -e '2+3; 0'\n        - root -b -l -q -x -e 'gSystem->LoadAllLibraries(); 0'\n        - echo ${CONDA_BUILD_SYSROOT}  # [osx]\n        # # There should be no hard coded references to the SDK\n        # Check the thisroot scripts work\n        - thisroot.sh\n        - thisroot.csh\n        - thisroot.fish\n        # Test if OpenGL is working\n        - root -b -l -q -x -e 'gStyle->SetCanvasPreferGL(kTRUE); c = new TCanvas(); if (!c->UseGL()) { throw std::runtime_error(\"OpenGL does not appear to be working\"); }'\n        # This test will fail due to lack of graphics support but try it anyway\n        # It should exit with \"TEveException: TEveManager::Create ROOT is running in batch mode.\"\n        - root -b -l -q -x \"${ROOTSYS}/tutorials/eve/geom_lhcb.C\" || true\n        # This tutorial uses davix to access a ROOT file over HTTP\n        - root -b -l -q -x \"${ROOTSYS}/tutorials/tree/run_h1analysis.C\"\n        - python -c \"import ROOT; ROOT.ROOT.EnableImplicitMT(); rdf = ROOT.RDataFrame('DecayTree', 'root://eospublic.cern.ch//eos/opendata/lhcb/AntimatterMatters2017/data/B2HHH_MagnetUp.root'); print(rdf.Cache('H1_PX').AsNumpy())\"\n        - python test_pyroot.py\n{% endmacro -%}\n\npackage:\n  name: root\n  version: {{ version }}\n\nsource:\n  # git_url: {{ os.environ.get(\"ROOT_JENKINS_GIT_URL\", \"https://github.com/root-project/root.git\") }}\n  # git_rev: v6-22-00-patches\n  url: https://github.com/root-project/root/archive/v{{ '-'.join(version.split('.')[:-1] + [version.split('.')[-1].rjust(2, '0')]) }}.tar.gz\n  sha256: 658b7ae68cc0de3c6027e7342c206cdcd02ef1f1660cf96ae2a84f5b6bbb95db\n  folder: root-source\n  patches:\n    - patches/root-x.xx.xx_cling-runtime-sysroot.patch\n    - patches/root-x.xx.xx-copy-abspath-headers.patch  # [osx]\n    - patches/root-x.xx.xx-osx-remove-hardcoded-sysroot.patch  # [osx]\n    # https://sft.its.cern.ch/jira/browse/ROOT-10812\n    - patches/0001-Patch-clad-build-for-use-with-external-clang.patch\n    - patches/0002-Fix-DynamicLibraryManagerSymbol-for-external-LLVM.patch\n\nbuild:\n  number: {{ build_number }}\n  skip: True  # [win]\n  string: py{{ CONDA_PY }}h{{ PKG_HASH }}_{{ build_number }}\n\n# Required for conda to generate the correct build matrix\nrequirements:\n  build:\n{%- if \"ROOT_USE_CCACHE\" in os.environ %}\n    - ccache\n{%- endif %}\n    - {{ compiler('c') }}\n    - {{ compiler('cxx') }}\n    - {{ compiler('fortran') }}\n    - cmake\n    - git\n    - pkg-config\n    - sed\n    - make\n    # Required for OpenGL support\n    # See https://conda-forge.org/docs/maintainer/knowledge_base.html?highlight=cdt#libgl\n    - {{ cdt('mesa-libgl-devel') }}  # [linux]\n    - {{ cdt('mesa-dri-drivers') }}  # [linux]\n    - {{ cdt('libselinux') }}  # [linux]\n    - {{ cdt('libxdamage') }}  # [linux]\n    - {{ cdt('libxxf86vm') }}  # [linux]\n  host:\n    - libblas\n    - libcblas\n    - {{ compiler('c') }}  # [linux]\n    - {{ compiler('cxx') }}  # [linux]\n    - {{ compiler('fortran') }}  # [linux]\n    - numpy\n    - afterimage\n    - cfitsio\n    - clangdev ={{ clang_version }}\n    - clang_variant * {{ clang_patches_version }}\n    - davix\n    - fftw\n    - freetype\n    - ftgl\n    - gdk-pixbuf\n    - giflib\n    - glew\n    - gl2ps\n    - graphviz\n    - gsl\n    - libglu  # [linux]\n    - libpng\n    - librsvg\n    - libtiff\n    - libxml2\n    - llvmdev ==5\n    - lz4-c\n    # - mysql\n    - openssl\n    - pcre\n    # - postgresql\n    - pythia8\n    - python\n    - sqlite\n    - tbb\n    - tbb-devel\n    - vdt\n    - xorg-libx11  # [linux]\n    - xorg-libxau  # [linux]\n    - xorg-libxcursor  # [linux]\n    - xorg-libxext  # [linux]\n    - xorg-libxfixes  # [linux]\n    - xorg-libxft  # [linux]\n    - xorg-libxpm  # [linux]\n    - xrootd\n    - xz\n    # FIXME: The generated allDict.cxx.pch is dependent on version of the C++ headers used\n    - {{ pin_compatible('libcxx', min_pin='x', max_pin='x') }}\n    - xxhash\n    - zlib\n    - zstd\n  run:\n    - python\n    - numba\n    - cffi\n  run_constrained:\n    - __osx >={{ MACOSX_DEPLOYMENT_TARGET|default(\"10.9\") }}  # [osx]\n\noutputs:\n  - name: root-dependencies\n    build:\n      number: {{ build_number }}\n      string: py{{ CONDA_PY }}h{{ PKG_HASH }}_{{ build_number }}\n      skip: True  # [win]\n      script: echo \"Minimal build script is required for conda to set RECIPE_DIR\"\n    requirements:\n      # Include the build dependencies to ensure the build string is correct\n      build:\n{%- if \"ROOT_USE_CCACHE\" in os.environ %}\n        - ccache\n{%- endif %}\n        - {{ compiler('c') }}\n        - {{ compiler('cxx') }}\n        - {{ compiler('fortran') }}\n        - cmake\n        - git\n        - pkg-config\n        - sed\n        - make\n        # Required for OpenGL support\n        # See https://conda-forge.org/docs/maintainer/knowledge_base.html?highlight=cdt#libgl\n        - {{ cdt('mesa-libgl-devel') }}  # [linux]\n        - {{ cdt('mesa-dri-drivers') }}  # [linux]\n        - {{ cdt('libselinux') }}  # [linux]\n        - {{ cdt('libxdamage') }}  # [linux]\n        - {{ cdt('libxxf86vm') }}  # [linux]\n      # Include the host dependencies so we pick up any pinning and run_exports\n      host:\n        - libblas\n        - libcblas\n        - {{ compiler('c') }}  # [linux]\n        - {{ compiler('cxx') }}  # [linux]\n        - {{ compiler('fortran') }}  # [linux]\n        - numpy\n        - afterimage\n        - cfitsio\n        - clangdev ={{ clang_version }}\n        - clang_variant * {{ clang_patches_version }}\n        - davix\n        - fftw\n        - freetype\n        - ftgl\n        - gdk-pixbuf\n        - giflib\n        - glew\n        - gl2ps\n        - graphviz\n        - gsl\n        - libglu  # [linux]\n        - libpng\n        - librsvg\n        - libtiff\n        - libxml2\n        - llvmdev ==5\n        - lz4-c\n        # - mysql\n        - openssl\n        - pcre\n        # - postgresql\n        - pythia8\n        - python\n        - sqlite\n        - tbb\n        - tbb-devel\n        - vdt\n        - xorg-libx11  # [linux]\n        - xorg-libxau  # [linux]\n        - xorg-libxcursor  # [linux]\n        - xorg-libxext  # [linux]\n        - xorg-libxfixes  # [linux]\n        - xorg-libxft  # [linux]\n        - xorg-libxpm  # [linux]\n        - xrootd\n        - xz\n        # FIXME: The generated allDict.cxx.pch is dependent on version of the C++ headers used\n        - {{ pin_compatible('libcxx', min_pin='x', max_pin='x') }}\n        - xxhash\n        - zlib\n        - zstd\n      run:\n        - {{ pin_compatible('numpy') }}\n        - cfitsio\n        - fftw\n        - gdk-pixbuf\n        - glew\n        - gl2ps\n        - graphviz\n        - libglu  # [linux]\n        - librsvg\n        - pythia8\n        - python\n        - tbb-devel\n        - xorg-libx11  # [linux]\n        - xorg-libxau  # [linux]\n        - xorg-libxcursor  # [linux]\n        - xorg-libxext  # [linux]\n        - xorg-libxft  # [linux]\n        - xorg-libxpm  # [linux]\n        # FIXME: Required to ensure a consistent etc/allDict.cxx.pch\n        - {{ pin_compatible('libcxx', min_pin='x', max_pin='x') }}\n        - {{ pin_compatible('xxhash', max_pin='x.x.x') }}\n      run_constrained:\n        - __osx >={{ MACOSX_DEPLOYMENT_TARGET|default(\"10.9\") }}  # [osx]\n    test:\n      commands:\n        - echo \"Testing is performed in the root_base and root outputs\"\n\n  # An underscore is required here to ensure it is built after root-dependencies (required for testing)\n  - name: root_base\n    build:\n      number: {{ build_number }}\n      string: py{{ CONDA_PY }}h{{ PKG_HASH }}_{{ build_number }}\n      skip: True  # [win]\n      script:\n        - set -euxo pipefail\n        - find ${PREFIX}/bin -type f -maxdepth 1 > ${SRC_DIR}/initial-filelist.txt\n        - cp -rp ${PREFIX}/bin ${SRC_DIR}/initial-bin-dir\n        # Copy the new files in ${PREFIX}/bin to a dedicated directory\n{%- for key, value in os.environ.items() %}\n  {%- if key.startswith(\"ROOT_\") %}\n        - export {{ key }}={{ value }}\n  {%- endif %}\n{%- endfor %}\n        - ${RECIPE_DIR}/build_root-base.sh\n        - mkdir ${SRC_DIR}/root-binaries/\n        - |\n          find ${PREFIX}/bin -type f -maxdepth 1 -exec \\\n            bash -c 'fn={}; if grep --quiet \"^$fn\\$\" \"${SRC_DIR}/initial-filelist.txt\"; then echo \"Skipping $fn\"; else echo \"Found new file $fn\"; mv \"$fn\" \"${SRC_DIR}/root-binaries/\"; fi' \\;\n      run_exports:\n        # https://abi-laboratory.pro/?view=timeline&l=root\n        - {{ pin_subpackage('root_base', max_pin='x.x') }}\n      ignore_prefix_files:\n        - lib/*.pcm\n      # Taken from \"conda render ./recipe/ -m .ci_support/osx_python3.7.yaml\"\n      # Sorted and commented run_exports that we want to keep\n      # TODO: This will need updating occasionally\n      ignore_run_exports:\n        # - afterimage\n        # - davix\n        # - freetype\n        - ftgl\n        - gl2ps\n        - giflib\n        - gsl\n        - krb5\n        # - libblas\n        # - libcblas\n        # - libcxx\n        # - libgfortran\n        # - libpng\n        # - libtiff\n        # - libxml2\n        # - lz4-c\n        # - openssl\n        # - pcre\n        - sqlite\n        # - tbb\n        # - vdt\n        # - xrootd\n        # - xz\n    requirements:\n      build:\n{%- if \"ROOT_USE_CCACHE\" in os.environ %}\n        - ccache\n{%- endif %}\n        - {{ compiler('c') }}\n        - {{ compiler('cxx') }}\n        - {{ compiler('fortran') }}\n        - cmake\n        - git\n        - pkg-config\n        - sed\n        - make\n        # Required for OpenGL support\n        # See https://conda-forge.org/docs/maintainer/knowledge_base.html?highlight=cdt#libgl\n        - {{ cdt('mesa-libgl-devel') }}  # [linux]\n        - {{ cdt('mesa-dri-drivers') }}  # [linux]\n        - {{ cdt('libselinux') }}  # [linux]\n        - {{ cdt('libxdamage') }}  # [linux]\n        - {{ cdt('libxxf86vm') }}  # [linux]\n      host:\n        - libblas\n        - libcblas\n        - {{ compiler('c') }}  # [linux]\n        - {{ compiler('cxx') }}  # [linux]\n        - {{ compiler('fortran') }}  # [linux]\n        - numpy\n        - afterimage\n        - cfitsio\n        - clangdev ={{ clang_version }}\n        - clang_variant * {{ clang_patches_version }}\n        - davix\n        - fftw\n        - freetype\n        - ftgl\n        - gdk-pixbuf\n        - giflib\n        - glew\n        - gl2ps\n        - graphviz\n        - gsl\n        - libglu  # [linux]\n        - libpng\n        - librsvg\n        - libtiff\n        - libxml2\n        - llvmdev ==5\n        - lz4-c\n        # - mysql\n        - openssl\n        - pcre\n        # - postgresql\n        - pythia8\n        - python\n        - sqlite\n        - tbb\n        - tbb-devel\n        - vdt\n        - xorg-libx11  # [linux]\n        - xorg-libxau  # [linux]\n        - xorg-libxcursor  # [linux]\n        - xorg-libxext  # [linux]\n        - xorg-libxfixes  # [linux]\n        - xorg-libxft  # [linux]\n        - xorg-libxpm  # [linux]\n        - xrootd\n        - xz\n        # FIXME: The generated allDict.cxx.pch is dependent on version of the C++ headers used\n        - {{ pin_compatible('libcxx', min_pin='x', max_pin='x') }}\n        - xxhash\n        - zlib\n        - zstd\n      run:\n        # FIXME: Required to ensure a consistent etc/allDict.cxx.pch\n        - {{ pin_compatible('libcxx', min_pin='x', max_pin='x') }}\n        - python\n        - {{ compiler('c') }}\n        - {{ compiler('cxx') }}\n        - {{ compiler('fortran') }}\n        - {{ pin_compatible('xxhash', max_pin='x.x.x') }}\n        - {{ pin_compatible('numpy') }}\n        - numba\n        - cffi\n      run_constrained:\n        # Items listed here conflict with ROOT\n        # FIXME Add support in ROOT for building with an external cling\n        - cling 9999\n        - root5 9999\n        - __osx >={{ MACOSX_DEPLOYMENT_TARGET|default(\"10.9\") }}  # [osx]\n    test:\n      commands:\n        - echo \"Tested in other outputs\"\n\n  - name: root-binaries\n    build:\n      number: {{ build_number }}\n      string: py{{ CONDA_PY }}h{{ PKG_HASH }}_{{ build_number }}\n      skip: True  # [win]\n      script:\n        - set -euxo pipefail\n        # Copy the executables back into ${PREFIX}/bin\n        # This is done to avoid users getting broken binaries from root_base\n        - mkdir -p ${PREFIX}/bin\n        - ls ${PREFIX}/bin/\n        - cp -rp ${SRC_DIR}/root-binaries/* ${PREFIX}/bin/\n        - ls ${PREFIX}/bin/\n    requirements:\n      build:\n{%- if \"ROOT_USE_CCACHE\" in os.environ %}\n        - ccache\n{%- endif %}\n        - {{ compiler('c') }}\n        - {{ compiler('cxx') }}\n        - {{ compiler('fortran') }}\n        - cmake\n        - git\n        - pkg-config\n        - sed\n        - make\n        # Required for OpenGL support\n        # See https://conda-forge.org/docs/maintainer/knowledge_base.html?highlight=cdt#libgl\n        - {{ cdt('mesa-libgl-devel') }}  # [linux]\n        - {{ cdt('mesa-dri-drivers') }}  # [linux]\n        - {{ cdt('libselinux') }}  # [linux]\n        - {{ cdt('libxdamage') }}  # [linux]\n        - {{ cdt('libxxf86vm') }}  # [linux]\n      # Have to copy the host dependencies in order to be able to also install root_base\n      host:\n        - libblas\n        - libcblas\n        - {{ compiler('c') }}  # [linux]\n        - {{ compiler('cxx') }}  # [linux]\n        - {{ compiler('fortran') }}  # [linux]\n        - numpy\n        - afterimage\n        - cfitsio\n        # These not required as they're are statically linked in libCling. They also cannot\n        # be installed in the same environment as root_base due to the compiler constraint\n        # - clangdev ={{ clang_version }}\n        # - clang_variant * {{ clang_patches_version }}\n        # - llvmdev ==5\n        - davix\n        - fftw\n        - freetype\n        - ftgl\n        - gdk-pixbuf\n        - giflib\n        - glew\n        - gl2ps\n        - graphviz\n        - gsl\n        - libglu  # [linux]\n        - libpng\n        - librsvg\n        - libtiff\n        - libxml2\n        - lz4-c\n        # - mysql\n        - openssl\n        - pcre\n        # - postgresql\n        - pythia8\n        - python\n        - sqlite\n        - tbb\n        - tbb-devel\n        - vdt\n        - xorg-libx11  # [linux]\n        - xorg-libxau  # [linux]\n        - xorg-libxcursor  # [linux]\n        - xorg-libxext  # [linux]\n        - xorg-libxfixes  # [linux]\n        - xorg-libxft  # [linux]\n        - xorg-libxpm  # [linux]\n        - xrootd\n        - xz\n        # FIXME: The generated allDict.cxx.pch is dependent on version of the C++ headers used\n        - {{ pin_compatible('libcxx', min_pin='x', max_pin='x') }}\n        - {{ pin_subpackage('root_base', exact=True) }}\n        - xxhash\n        - zlib\n        - zstd\n      run:\n        - {{ pin_subpackage('root_base', exact=True) }}\n        - python\n        - {{ pin_compatible('xxhash', max_pin='x.x.x') }}\n        - {{ pin_compatible('numpy') }}\n        - numba\n        - cffi\n      run_constrained:\n        - __osx >={{ MACOSX_DEPLOYMENT_TARGET|default(\"10.9\") }}  # [osx]\n    test:\n      files:\n        - test.cpp\n        - test_pyroot.py\n      requires:\n        - root-dependencies {{ version }} *_{{ build_number }}\n      commands: {{ test_commands() }}\n\n  - name: root\n    build:\n      number: {{ build_number }}\n      string: py{{ CONDA_PY }}h{{ PKG_HASH }}_{{ build_number }}\n      skip: True  # [win]\n      script:\n        - set -euxo pipefail\n        - pwd\n        - ls\n        - echo \"Minimal build script is required for conda to set RECIPE_DIR\"\n    requirements:\n      # Include the build dependencies and python to ensure the build string is correct\n      build:\n{%- if \"ROOT_USE_CCACHE\" in os.environ %}\n        - ccache\n{%- endif %}\n        - {{ compiler('c') }}\n        - {{ compiler('cxx') }}\n        - {{ compiler('fortran') }}\n        - cmake\n        - git\n        - pkg-config\n        - sed\n        - make\n        # Required for OpenGL support\n        # See https://conda-forge.org/docs/maintainer/knowledge_base.html?highlight=cdt#libgl\n        - {{ cdt('mesa-libgl-devel') }}  # [linux]\n        - {{ cdt('mesa-dri-drivers') }}  # [linux]\n        - {{ cdt('libselinux') }}  # [linux]\n        - {{ cdt('libxdamage') }}  # [linux]\n        - {{ cdt('libxxf86vm') }}  # [linux]\n      host:\n        - python\n      run:\n        - python\n        - compilers  # This package is hostile to how conda-build manages compilers\n        - metakernel\n        - notebook\n        - {{ pin_subpackage('root_base', exact=True) }}\n        - {{ pin_subpackage('root-binaries', exact=True) }}\n        - {{ pin_subpackage('root-dependencies', exact=True) }}\n      run_constrained:\n        - __osx >={{ MACOSX_DEPLOYMENT_TARGET|default(\"10.9\") }}  # [osx]\n    test:\n      files:\n        - test.cpp\n        - test_pyroot.py\n      requires:\n        - ipython\n      imports:\n        - ROOT\n        - JupyROOT\n      commands: {{ test_commands() }}\n        - ipython -c 'import JsMVA'\n        # This command only works if the compilers are available\n        - root -l -b -q -x test.cpp++\n\nabout:\n  home: https://root.cern/\n  license: LGPL-2.1-only\n  license_family: LGPL\n  license_file: root-source/LICENSE\n  doc_url: https://root.cern/documentation\n  dev_url: https://github.com/root-project/root/\n  summary: |\n      ROOT is a modular scientific software toolkit. It provides all the functionalities needed to deal with big data\n      processing, statistical analysis, visualisation and storage. It is mainly written in C++ but integrated with other\n      languages such as Python and R.\n  description: |\n      Almost everything in ROOT should be supported in this Conda package; ROOT was built with lots of options turned\n      on. Here are a few things to try:\n\n      * `root`: you can start up a session and see the splash screen; Control-D to exit.\n      * `python` followed by `import ROOT` will load PyROOT.\n      * `root --notebook` will start a notebook server with a ROOT kernel choice.\n      * `rootbrowse` will open a TBrowser session so you can look through files.\n      * `root -l -q $ROOTSYS/tutorials/dataframe/df013_InspectAnalysis.C` will run a DataFrame example with an animated plot.\n      * `root -b -q -l -n -e \"std::cout << TROOT::GetTutorialDir() << std::endl;\"` will print the tutorial dir.\n      * `root -b -l -q -e 'std::cout << (float) TPython::Eval(\"1+1\") << endl;'` will run Python from C++ ROOT.\n\n      See the post [here](https://iscinumpy.gitlab.io/post/root-conda/) for more information about using this Conda package.\n\n      The ROOT package will prepare the required compilers. Everything in Conda is symlinked into\n      `$CONDA_PREFIX` if you build things by hand; tools like CMake should find it automatically. The `thisroot.*`\n      scripts should not be used and are not provided. Graphics, `rootbrowse`, etc. all should work. OpenGL is enabled.\n\n      There is also a `root_base` package, with minimal dependecies, that libraries should depend on this to avoid\n      having a runtime dependency on the `compilers` package. `root-dependencies` and `root-binaries` are also available. In most cases users should use the `root` package directly, since it adds both of these, along with compilers, Jupyter, and a few other things to facilitate using ROOT or PyROOT.\n\n      ROOT was built with and will report `-std=c++17` from `root-config`.\n\nextra:\n  recipe-maintainers:\n    - chrisburr\n    - henryiii\n    - eguiraud\n    - egpbos\n",
 "rendered_recipe": {
  "about": {
   "description": "Almost everything in ROOT should be supported in this Conda package; ROOT was built with lots of options turned\non. Here are a few things to try:\n\n* `root`: you can start up a session and see the splash screen; Control-D to exit.\n* `python` followed by `import ROOT` will load PyROOT.\n* `root --notebook` will start a notebook server with a ROOT kernel choice.\n* `rootbrowse` will open a TBrowser session so you can look through files.\n* `root -l -q $ROOTSYS/tutorials/dataframe/df013_InspectAnalysis.C` will run a DataFrame example with an animated plot.\n* `root -b -q -l -n -e \"std::cout << TROOT::GetTutorialDir() << std::endl;\"` will print the tutorial dir.\n* `root -b -l -q -e 'std::cout << (float) TPython::Eval(\"1+1\") << endl;'` will run Python from C++ ROOT.\n\nSee the post [here](https://iscinumpy.gitlab.io/post/root-conda/) for more information about using this Conda package.\n\nThe ROOT package will prepare the required compilers. Everything in Conda is symlinked into\n`$CONDA_PREFIX` if you build things by hand; tools like CMake should find it automatically. The `thisroot.*`\nscripts should not be used and are not provided. Graphics, `rootbrowse`, etc. all should work. OpenGL is enabled.\n\nThere is also a `root_base` package, with minimal dependecies, that libraries should depend on this to avoid\nhaving a runtime dependency on the `compilers` package. `root-dependencies` and `root-binaries` are also available. In most cases users should use the `root` package directly, since it adds both of these, along with compilers, Jupyter, and a few other things to facilitate using ROOT or PyROOT.\n\nROOT was built with and will report `-std=c++17` from `root-config`.\n",
   "dev_url": "https://github.com/root-project/root/",
   "doc_url": "https://root.cern/documentation",
   "home": "https://root.cern/",
   "license": "LGPL-2.1-only",
   "license_family": "LGPL",
   "license_file": "root-source/LICENSE",
   "summary": "ROOT is a modular scientific software toolkit. It provides all the functionalities needed to deal with big data\nprocessing, statistical analysis, visualisation and storage. It is mainly written in C++ but integrated with other\nlanguages such as Python and R.\n"
  },
  "build": {
   "number": 1,
   "script": [
    "set -euxo pipefail",
    "pwd",
    "ls",
    "echo \"Minimal build script is required for conda to set RECIPE_DIR\""
   ],
   "string": "py38hbb65a81_1"
  },
  "extra": {
   "copy_test_source_files": true,
   "final": true,
   "recipe-maintainers": [
    "chrisburr",
    "egpbos",
    "eguiraud",
    "henryiii"
   ]
  },
  "package": {
   "name": "root",
   "version": "6.22.0"
  },
  "requirements": {
   "build": [
    "bzip2 1.0.8 h0b31af3_2",
    "ca-certificates 2020.4.5.2 hecda079_0",
    "cctools 927.0.2 h5ba7a2e_4",
    "clang 9.0.1 default_hf57f61e_0",
    "clang-tools 9.0.1 default_hf57f61e_0",
    "clang_osx-64 9.0.1 h05bbb7f_2",
    "clangxx 9.0.1 default_hf57f61e_0",
    "clangxx_osx-64 9.0.1 h05bbb7f_2",
    "cmake 3.17.0 hd28f656_0",
    "compiler-rt 9.0.1 h6a512c6_3",
    "compiler-rt_osx-64 9.0.1 h99342c6_3",
    "curl 7.69.1 h2d98d24_0",
    "expat 2.2.9 h4a8c4bd_2",
    "gettext 0.19.8.1 h46ab8bc_1002",
    "gfortran_impl_osx-64 7.3.0 hf4212f2_2",
    "gfortran_osx-64 7.3.0 h22b1bf0_11",
    "git 2.27.0 pl526hcc376a2_0",
    "gmp 6.2.0 h4a8c4bd_2",
    "isl 0.19 0",
    "krb5 1.17.1 h1752a42_0",
    "ld64 450.3 h3c32e8a_4",
    "libcurl 7.69.1 hc0b9707_0",
    "libcxx 10.0.0 h1af66ff_2",
    "libedit 3.1.20191231 hed1e85f_0",
    "libffi 3.2.1 h4a8c4bd_1007",
    "libgfortran 4.0.0 0",
    "libiconv 1.15 h0b31af3_1006",
    "libllvm9 9.0.1 h7475705_1",
    "libssh2 1.9.0 h39bdce6_2",
    "libuv 1.38.0 h0b31af3_0",
    "llvm-tools 9.0.1 h1341992_1",
    "llvmdev 9.0.1 h7475705_1",
    "make 4.3 h0b31af3_0",
    "mpc 1.1.0 h4160ff4_1007",
    "mpfr 4.0.2 h65ac59c_1",
    "ncurses 6.1 h0a44026_1002",
    "openssl 1.1.1g h0b31af3_0",
    "pcre 8.44 h4a8c4bd_0",
    "perl 5.26.2 haec8ef5_1006",
    "pkg-config 0.29.2 hdc84dc8_1006",
    "rhash 1.3.6 h1de35cc_1001",
    "sed 4.7 h3efe00b_1000",
    "tapi 1000.10.8 ha1b3eb9_4",
    "tk 8.6.10 hbbe82c9_0",
    "xz 5.2.5 h0b31af3_0",
    "zlib 1.2.11 h0b31af3_1006"
   ],
   "host": [
    "ca-certificates 2020.4.5.2 hecda079_0",
    "libcxx 10.0.0 h1af66ff_2",
    "libffi 3.2.1 h4a8c4bd_1007",
    "libgfortran 4.0.0 2",
    "llvm-openmp 10.0.0 h28b9765_0",
    "ncurses 6.1 h0a44026_1002",
    "openssl 1.1.1g h0b31af3_0",
    "python 3.8.2 hd5f0129_7_cpython",
    "python_abi 3.8 1_cp38",
    "readline 8.0 hcfe32e1_0",
    "sqlite 3.30.1 h93121df_0",
    "tk 8.6.10 hbbe82c9_0",
    "xz 5.2.5 h0b31af3_0",
    "zlib 1.2.11 h0b31af3_1006"
   ],
   "run": [
    "compilers",
    "libcxx >=9.0.1",
    "libgfortran >=4.0.0,<5.0.0.a0",
    "metakernel",
    "notebook",
    "python >=3.8,<3.9.0a0",
    "python_abi 3.8.* *_cp38",
    "root-binaries 6.22.0 py38hbb65a81_1",
    "root-dependencies 6.22.0 py38hbb65a81_1",
    "root_base 6.22.0 py38h1afb842_1"
   ],
   "run_constrained": [
    "__osx >=10.13"
   ]
  },
  "source": {
   "folder": "root-source",
   "patches": [
    "patches/0001-Patch-clad-build-for-use-with-external-clang.patch",
    "patches/0002-Fix-DynamicLibraryManagerSymbol-for-external-LLVM.patch",
    "patches/root-x.xx.xx-copy-abspath-headers.patch",
    "patches/root-x.xx.xx-osx-remove-hardcoded-sysroot.patch",
    "patches/root-x.xx.xx_cling-runtime-sysroot.patch"
   ],
   "sha256": "658b7ae68cc0de3c6027e7342c206cdcd02ef1f1660cf96ae2a84f5b6bbb95db",
   "url": "https://github.com/root-project/root/archive/v6-22-00.tar.gz"
  }
 },
 "version": "6.22.0"
}