{
 "about": {
  "channels": [
   "conda-forge",
   "defaults"
  ],
  "conda_build_version": "3.17.8",
  "conda_private": false,
  "conda_version": "4.6.4",
  "description": "The micromagneticmodel is a representation of the physics of a\nmicromagnetic problem in Python. It does not carry out any\ncalculation. However, other packages derive from this abstract\nclass and provide 'micromagnetic calculators'. For example the\n'oommfc' package is a micromagnetic calculator (OOMMFCalculator)\nbased on the micromagneticmodel provided here, and uses OOMMF to\ncarry out any actual numerical calculation.\n",
  "dev_url": "https://github.com/joommf/micromagneticmodel",
  "doc_url": "http://micromagneticmodel.readthedocs.io",
  "env_vars": {
   "CIO_TEST": "<not set>"
  },
  "extra": {
   "copy_test_source_files": true,
   "final": true,
   "recipe-maintainers": [
    "marijanbeg",
    "fangohr",
    "takluyver",
    "davidcortesortuno",
    "rpep"
   ]
  },
  "home": "http://joommf.github.io/",
  "identifiers": [],
  "keywords": [],
  "license": "BSD 3-clause",
  "license_family": "BSD",
  "license_file": "LICENSE",
  "root_pkgs": [
   "filelock 3.0.10 py_0",
   "beautifulsoup4 4.7.1 py37_1001",
   "lz4-c 1.8.3 hf484d3e_1001",
   "pyrsistent 0.14.10 py37h14c3975_0",
   "liblief 0.9.0 h7725739_2",
   "lzo 2.10 h14c3975_1000",
   "soupsieve 1.8 py37_0",
   "pycosat 0.6.3 py37h14c3975_1001",
   "conda-build 3.17.8 py37_0",
   "expat 2.2.6 he6710b0_0",
   "traitlets 4.3.2 py37_1000",
   "openssl 1.1.1a h14c3975_1000",
   "readline 7.0 hf8c457e_1001",
   "cffi 1.12.1 py37h9745a5d_0",
   "libarchive 3.3.3 h5d8350f_2",
   "conda 4.6.4 py37_0",
   "pytz 2018.9 py_0",
   "anaconda-client 1.7.2 py_0",
   "libcurl 7.62.0 h20c2e04_0",
   "python 3.7.2 h0371630_0",
   "gettext 0.19.8.1 h9745a5d_1001",
   "requests 2.21.0 py37_1000",
   "urllib3 1.24.1 py37_1000",
   "sqlite 3.26.0 h67949de_1000",
   "libedit 3.1.20170329 hf8c457e_1001",
   "pkginfo 1.5.0.1 py_0",
   "python-dateutil 2.8.0 py_0",
   "setuptools 40.8.0 py37_0",
   "idna 2.8 py37_1000",
   "libgcc-ng 7.3.0 hdf63c60_0",
   "decorator 4.3.2 py_0",
   "zstd 1.3.3 1",
   "yaml 0.1.7 h14c3975_1001",
   "krb5 1.14.6 0",
   "pycparser 2.19 py_0",
   "attrs 18.2.0 py_0",
   "ca-certificates 2018.11.29 ha4d7672_0",
   "py-lief 0.9.0 py37h7725739_2",
   "wheel 0.33.1 py37_0",
   "icu 58.2 hf484d3e_1000",
   "tk 8.6.9 h84994c4_1000",
   "tini 0.18.0 h14c3975_1001",
   "curl 7.62.0 hbc83047_0",
   "tqdm 4.31.1 py_0",
   "markupsafe 1.1.0 py37h14c3975_1000",
   "glob2 0.6 py_0",
   "libssh2 1.8.0 1",
   "libstdcxx-ng 7.3.0 hdf63c60_0",
   "patchelf 0.9 hf484d3e_1002",
   "certifi 2018.11.29 py37_1000",
   "jinja2 2.10 py_1",
   "nbformat 4.4.0 py_1",
   "cryptography 2.5 py37h1ba5d50_0",
   "git 2.19.1 pl526hacde149_0",
   "conda-env 2.6.0 1",
   "asn1crypto 0.24.0 py37_1003",
   "perl 5.26.2 h14c3975_1002",
   "bzip2 1.0.6 h14c3975_1002",
   "jsonschema 3.0.0a3 py37_1000",
   "libiconv 1.15 h14c3975_1004",
   "ipython_genutils 0.2.0 py_1",
   "six 1.12.0 py37_1000",
   "python-libarchive-c 2.8 py37_1004",
   "ncurses 6.1 hf484d3e_1002",
   "jupyter_core 4.4.0 py_0",
   "xz 5.2.4 h14c3975_1001",
   "psutil 5.5.1 py37h14c3975_0",
   "libffi 3.2.1 hf484d3e_1005",
   "ruamel_yaml 0.15.71 py37h14c3975_1000",
   "pyyaml 3.13 py37h14c3975_1001",
   "chardet 3.0.4 py37_1003",
   "pyopenssl 19.0.0 py37_0",
   "libxml2 2.9.8 h143f9aa_1005",
   "gosu 1.10 h81701ea_1001",
   "pysocks 1.6.8 py37_1002",
   "pip 19.0.2 py37_0",
   "clyent 1.2.2 py_1",
   "zlib 1.2.11 h14c3975_1004",
   "conda-forge-ci-setup 2.1.4 py37_0",
   "click 7.0 py_0"
  ],
  "summary": "A Python-based micromagnetic model",
  "tags": []
 },
 "conda_build_config": {
  "build_number_decrement": "0",
  "c_compiler": "gcc",
  "channel_sources": "conda-forge,defaults",
  "channel_targets": "conda-forge main",
  "cpu_optimization_target": "nocona",
  "cran_mirror": "https://cran.r-project.org",
  "cxx_compiler": "gxx",
  "docker_image": "condaforge/linux-anvil-comp7",
  "extend_keys": [
   "extend_keys",
   "pin_run_as_build",
   "ignore_version",
   "ignore_build_only_deps"
  ],
  "fortran_compiler": "gfortran",
  "ignore_build_only_deps": [
   "numpy",
   "python"
  ],
  "lua": "5",
  "numpy": "1.11",
  "perl": "5.26.0",
  "pin_run_as_build": {
   "python": {
    "max_pin": "x.x",
    "min_pin": "x.x"
   },
   "r-base": {
    "max_pin": "x.x.x",
    "min_pin": "x.x.x"
   }
  },
  "python": "3.7",
  "r_base": "3.5",
  "target_platform": "linux-64"
 },
 "files": [
  "site-packages/micromagneticmodel-0.8.4.dist-info/INSTALLER",
  "site-packages/micromagneticmodel-0.8.4.dist-info/LICENSE",
  "site-packages/micromagneticmodel-0.8.4.dist-info/METADATA",
  "site-packages/micromagneticmodel-0.8.4.dist-info/RECORD",
  "site-packages/micromagneticmodel-0.8.4.dist-info/WHEEL",
  "site-packages/micromagneticmodel/__init__.py",
  "site-packages/micromagneticmodel/consts.py",
  "site-packages/micromagneticmodel/data.py",
  "site-packages/micromagneticmodel/drivers/__init__.py",
  "site-packages/micromagneticmodel/drivers/driver.py",
  "site-packages/micromagneticmodel/drivers/hysteresisdriver.py",
  "site-packages/micromagneticmodel/drivers/mindriver.py",
  "site-packages/micromagneticmodel/drivers/timedriver.py",
  "site-packages/micromagneticmodel/dynamics/__init__.py",
  "site-packages/micromagneticmodel/dynamics/damping.py",
  "site-packages/micromagneticmodel/dynamics/dynamics.py",
  "site-packages/micromagneticmodel/dynamics/dynamicsterm.py",
  "site-packages/micromagneticmodel/dynamics/precession.py",
  "site-packages/micromagneticmodel/dynamics/stt.py",
  "site-packages/micromagneticmodel/hamiltonian/__init__.py",
  "site-packages/micromagneticmodel/hamiltonian/cubicanisotropy.py",
  "site-packages/micromagneticmodel/hamiltonian/demag.py",
  "site-packages/micromagneticmodel/hamiltonian/dmi.py",
  "site-packages/micromagneticmodel/hamiltonian/energyproperties.py",
  "site-packages/micromagneticmodel/hamiltonian/energyterm.py",
  "site-packages/micromagneticmodel/hamiltonian/exchange.py",
  "site-packages/micromagneticmodel/hamiltonian/hamiltonian.py",
  "site-packages/micromagneticmodel/hamiltonian/uniaxialanisotropy.py",
  "site-packages/micromagneticmodel/hamiltonian/zeeman.py",
  "site-packages/micromagneticmodel/system.py",
  "site-packages/micromagneticmodel/tests/__init__.py",
  "site-packages/micromagneticmodel/tests/test_consts.py",
  "site-packages/micromagneticmodel/tests/test_cubicanisotropy.py",
  "site-packages/micromagneticmodel/tests/test_damping.py",
  "site-packages/micromagneticmodel/tests/test_data.py",
  "site-packages/micromagneticmodel/tests/test_demag.py",
  "site-packages/micromagneticmodel/tests/test_dmi.py",
  "site-packages/micromagneticmodel/tests/test_driver.py",
  "site-packages/micromagneticmodel/tests/test_dynamics.py",
  "site-packages/micromagneticmodel/tests/test_energyproperties.py",
  "site-packages/micromagneticmodel/tests/test_exchange.py",
  "site-packages/micromagneticmodel/tests/test_hamiltonian.py",
  "site-packages/micromagneticmodel/tests/test_hysteresisdriver.py",
  "site-packages/micromagneticmodel/tests/test_init.py",
  "site-packages/micromagneticmodel/tests/test_mindriver.py",
  "site-packages/micromagneticmodel/tests/test_precession.py",
  "site-packages/micromagneticmodel/tests/test_stt.py",
  "site-packages/micromagneticmodel/tests/test_system.py",
  "site-packages/micromagneticmodel/tests/test_term.py",
  "site-packages/micromagneticmodel/tests/test_termsum.py",
  "site-packages/micromagneticmodel/tests/test_timedriver.py",
  "site-packages/micromagneticmodel/tests/test_uniaxialanisotropy.py",
  "site-packages/micromagneticmodel/tests/test_zeeman.py",
  "site-packages/micromagneticmodel/util/__init__.py",
  "site-packages/micromagneticmodel/util/term.py",
  "site-packages/micromagneticmodel/util/termsum.py"
 ],
 "index": {
  "arch": null,
  "build": "py_2",
  "build_number": 2,
  "depends": [
   "discretisedfield",
   "joommfutil",
   "pytest",
   "python >=3.6"
  ],
  "license": "BSD 3-clause",
  "license_family": "BSD",
  "name": "micromagneticmodel",
  "noarch": "python",
  "platform": null,
  "subdir": "noarch",
  "timestamp": 1550781737339,
  "version": "0.8.4"
 },
 "metadata_version": 1,
 "name": "micromagneticmodel",
 "raw_recipe": "{% set name = \"micromagneticmodel\" %}\n{% set version = \"0.8.4\" %}\n{% set sha256 = \"bfa0552dc226a7b86c14182d2df69da444ebbd7929b721725b283d11b7a54701\" %}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  fn: {{ name }}-{{ version }}.tar.gz\n  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz\n  sha256: {{ sha256 }}\n\nbuild:\n  noarch: python\n  number: 2\n  script: pip install --no-deps .\n\nrequirements:\n  build:\n    - python\n    - pip\n  run:\n    - python >=3.6\n    - discretisedfield\n    - joommfutil\n    - pytest\n\ntest:\n  imports:\n    - micromagneticmodel\n    - micromagneticmodel.tests\n    - micromagneticmodel.drivers\n    - micromagneticmodel.dynamics\n    - micromagneticmodel.hamiltonian\n\n  commands:\n    - python -c \"import sys; import micromagneticmodel as m; sys.exit(m.test())\"\n\n\nabout:\n  home: http://joommf.github.io/\n  license: BSD 3-clause\n  summary: A Python-based micromagnetic model\n  license_family: BSD\n  license_file: LICENSE\n\n  description: |\n    The micromagneticmodel is a representation of the physics of a\n    micromagnetic problem in Python. It does not carry out any\n    calculation. However, other packages derive from this abstract\n    class and provide 'micromagnetic calculators'. For example the\n    'oommfc' package is a micromagnetic calculator (OOMMFCalculator)\n    based on the micromagneticmodel provided here, and uses OOMMF to\n    carry out any actual numerical calculation.\n  doc_url: http://micromagneticmodel.readthedocs.io\n  dev_url: https://github.com/joommf/micromagneticmodel\n\nextra:\n  recipe-maintainers:\n    - marijanbeg\n    - fangohr\n    - takluyver\n    - davidcortesortuno\n    - rpep\n",
 "rendered_recipe": {
  "about": {
   "description": "The micromagneticmodel is a representation of the physics of a\nmicromagnetic problem in Python. It does not carry out any\ncalculation. However, other packages derive from this abstract\nclass and provide 'micromagnetic calculators'. For example the\n'oommfc' package is a micromagnetic calculator (OOMMFCalculator)\nbased on the micromagneticmodel provided here, and uses OOMMF to\ncarry out any actual numerical calculation.\n",
   "dev_url": "https://github.com/joommf/micromagneticmodel",
   "doc_url": "http://micromagneticmodel.readthedocs.io",
   "home": "http://joommf.github.io/",
   "license": "BSD 3-clause",
   "license_family": "BSD",
   "license_file": "LICENSE",
   "summary": "A Python-based micromagnetic model"
  },
  "build": {
   "noarch": "python",
   "number": "2",
   "script": "pip install --no-deps .",
   "string": "py_2"
  },
  "extra": {
   "copy_test_source_files": true,
   "final": true,
   "recipe-maintainers": [
    "davidcortesortuno",
    "fangohr",
    "marijanbeg",
    "rpep",
    "takluyver"
   ]
  },
  "package": {
   "name": "micromagneticmodel",
   "version": "0.8.4"
  },
  "requirements": {
   "build": [
    "bzip2 1.0.6 h14c3975_1002",
    "ca-certificates 2018.11.29 ha4d7672_0",
    "certifi 2018.11.29 py37_1000",
    "libffi 3.2.1 hf484d3e_1005",
    "libgcc-ng 7.3.0 hdf63c60_0",
    "libstdcxx-ng 7.3.0 hdf63c60_0",
    "ncurses 6.1 hf484d3e_1002",
    "openssl 1.0.2p h14c3975_1002",
    "pip 19.0.3 py37_0",
    "python 3.7.1 hd21baee_1001",
    "readline 7.0 hf8c457e_1001",
    "setuptools 40.8.0 py37_0",
    "sqlite 3.26.0 h67949de_1000",
    "tk 8.6.9 h84994c4_1000",
    "wheel 0.33.1 py37_0",
    "xz 5.2.4 h14c3975_1001",
    "zlib 1.2.11 h14c3975_1004"
   ],
   "run": [
    "discretisedfield",
    "joommfutil",
    "pytest",
    "python >=3.6"
   ]
  },
  "source": {
   "fn": "micromagneticmodel-0.8.4.tar.gz",
   "sha256": "bfa0552dc226a7b86c14182d2df69da444ebbd7929b721725b283d11b7a54701",
   "url": "https://pypi.io/packages/source/m/micromagneticmodel/micromagneticmodel-0.8.4.tar.gz"
  },
  "test": {
   "commands": [
    "python -c \"import sys; import micromagneticmodel as m; sys.exit(m.test())\""
   ],
   "imports": [
    "micromagneticmodel",
    "micromagneticmodel.drivers",
    "micromagneticmodel.dynamics",
    "micromagneticmodel.hamiltonian",
    "micromagneticmodel.tests"
   ]
  }
 },
 "version": "0.8.4"
}