{
 "about": {
  "channels": [
   "conda-forge",
   "defaults"
  ],
  "conda_build_version": "3.18.9",
  "conda_private": false,
  "conda_version": "4.7.11",
  "description": "PySnooper is a poor man's debugger.\n\nYou're trying to figure out why your Python code isn't doing what you think it should be doing.\nYou'd love to use a full-fledged debugger with breakpoints and watches, but you can't be bothered\nto set one up right now.\n\nYou want to know which lines are running and which aren't, and what the values of the local variables are.\nMost people would use print lines, in strategic locations, some of them showing the values of variables.\n\nPySnooper lets you do the same, except instead of carefully crafting the right print lines,\nyou just add one decorator line to the function you're interested in. You'll get a play-by-play\nlog of your function, including which lines ran and when, and exactly when local variables were changed.\n\nWhat makes PySnooper stand out from all other code intelligence tools? You can use it in your shitty,\nsprawling enterprise codebase without having to do any setup. Just slap the decorator on, as shown below,\nand redirect the output to a dedicated log file by specifying its path as the first argument.\n",
  "dev_url": "https://github.com/cool-RR/PySnooper",
  "doc_url": "https://github.com/cool-RR/PySnooper",
  "env_vars": {
   "CIO_TEST": "<not set>"
  },
  "extra": {
   "copy_test_source_files": true,
   "final": true,
   "recipe-maintainers": [
    "volpatto"
   ]
  },
  "home": "https://github.com/cool-RR/PySnooper",
  "identifiers": [],
  "keywords": [],
  "license": "MIT",
  "license_family": "MIT",
  "license_file": "LICENSE",
  "root_pkgs": [
   "tini 0.18.0 h14c3975_1001",
   "git 2.23.0 pl526hce37bd2_0",
   "perl 5.26.2 h516909a_1006",
   "ripgrep 11.0.2 0",
   "jupyter_core 4.4.0 py_0",
   "yaml 0.1.7 h14c3975_1001",
   "setuptools 41.2.0 py37_0",
   "traitlets 4.3.2 py37_1000",
   "attrs 19.1.0 py_0",
   "cffi 1.12.3 py37h8022711_0",
   "expat 2.2.5 he1b5a44_1003",
   "certifi 2019.6.16 py37_1",
   "psutil 5.6.3 py37h516909a_0",
   "pytz 2019.2 py_0",
   "liblief 0.9.0 hf8a498c_1",
   "tk 8.6.9 hed695b0_1002",
   "patch 2.7.6 h14c3975_1001",
   "libffi 3.2.1 he1b5a44_1006",
   "python-dateutil 2.8.0 py_0",
   "urllib3 1.25.3 py37_0",
   "wheel 0.33.6 py37_0",
   "pyyaml 5.1.2 py37h516909a_0",
   "glob2 0.7 py_0",
   "libarchive 3.3.3 hb44662c_1005",
   "libssh2 1.8.2 h22169c7_2",
   "bzip2 1.0.8 h516909a_0",
   "zlib 1.2.11 h516909a_1005",
   "lz4-c 1.8.3 he1b5a44_1001",
   "ipython_genutils 0.2.0 py_1",
   "libgcc-ng 9.1.0 hdf63c60_0",
   "ca-certificates 2019.6.16 hecc5488_0",
   "pkginfo 1.5.0.1 py_0",
   "jinja2 2.10.1 py_0",
   "xz 5.2.4 h14c3975_1001",
   "gosu 1.10 h81701ea_1001",
   "zstd 1.4.0 h3b9ef0a_0",
   "pysocks 1.7.0 py37_0",
   "soupsieve 1.9.3 py37_0",
   "python-libarchive-c 2.8 py37_1004",
   "ruamel_yaml 0.15.71 py37h14c3975_1000",
   "asn1crypto 0.24.0 py37_1003",
   "py-lief 0.9.0 py37he1b5a44_1",
   "_libgcc_mutex 0.1 main",
   "sqlite 3.29.0 hcee41ef_1",
   "requests 2.22.0 py37_1",
   "pycparser 2.19 py37_1",
   "libstdcxx-ng 9.1.0 hdf63c60_0",
   "chardet 3.0.4 py37_1003",
   "libcurl 7.65.3 hda55be3_0",
   "ncurses 6.1 hf484d3e_1002",
   "jsonschema 3.0.2 py37_0",
   "conda-build 3.18.9 py37_3",
   "libedit 3.1.20170329 hf8c457e_1001",
   "pyopenssl 19.0.0 py37_0",
   "filelock 3.0.10 py_0",
   "readline 8.0 hf8c457e_0",
   "libxml2 2.9.9 hee79883_5",
   "conda 4.7.11 py37_0",
   "conda-package-handling 1.4.1 py37_0",
   "python 3.7.3 h33d41f4_1",
   "pip 19.2.3 py37_0",
   "idna 2.8 py37_1000",
   "pycosat 0.6.3 py37h14c3975_1001",
   "krb5 1.16.3 h05b26f9_1001",
   "six 1.12.0 py37_1000",
   "clyent 1.2.2 py_1",
   "icu 64.2 he1b5a44_1",
   "lzo 2.10 h14c3975_1000",
   "libiconv 1.15 h516909a_1005",
   "pyrsistent 0.15.4 py37h516909a_0",
   "curl 7.65.3 hf8cf82a_0",
   "patchelf 0.10 he1b5a44_0",
   "beautifulsoup4 4.8.0 py37_0",
   "tqdm 4.35.0 py_0",
   "anaconda-client 1.7.2 py_0",
   "decorator 4.4.0 py_0",
   "gettext 0.19.8.1 hc5be6a0_1002",
   "cryptography 2.7 py37h72c5cf5_0",
   "openssl 1.1.1c h516909a_0",
   "nbformat 4.4.0 py_1",
   "markupsafe 1.1.1 py37h14c3975_0",
   "conda-env 2.6.0 1",
   "click 7.0 py_0",
   "conda-forge-ci-setup 2.4.0 py37_0"
  ],
  "summary": "A poor man's debugger for Python.",
  "tags": []
 },
 "conda_build_config": {
  "CI": "azure",
  "c_compiler": "gcc",
  "channel_sources": "conda-forge,defaults",
  "channel_targets": "conda-forge main",
  "cpu_optimization_target": "nocona",
  "cran_mirror": "https://cran.r-project.org",
  "cxx_compiler": "gxx",
  "docker_image": "condaforge/linux-anvil-comp7",
  "extend_keys": [
   "pin_run_as_build",
   "extend_keys",
   "ignore_version",
   "ignore_build_only_deps"
  ],
  "fortran_compiler": "gfortran",
  "ignore_build_only_deps": [
   "numpy",
   "python"
  ],
  "lua": "5",
  "numpy": "1.11",
  "perl": "5.26.0",
  "pin_run_as_build": {
   "python": {
    "max_pin": "x.x",
    "min_pin": "x.x"
   },
   "r-base": {
    "max_pin": "x.x",
    "min_pin": "x.x"
   }
  },
  "python": "2.7",
  "r_base": "3.5",
  "target_platform": "linux-64"
 },
 "files": [
  "site-packages/PySnooper-0.2.7.dist-info/INSTALLER",
  "site-packages/PySnooper-0.2.7.dist-info/LICENSE",
  "site-packages/PySnooper-0.2.7.dist-info/METADATA",
  "site-packages/PySnooper-0.2.7.dist-info/RECORD",
  "site-packages/PySnooper-0.2.7.dist-info/WHEEL",
  "site-packages/pysnooper/__init__.py",
  "site-packages/pysnooper/pycompat.py",
  "site-packages/pysnooper/tracer.py",
  "site-packages/pysnooper/utils.py",
  "site-packages/pysnooper/variables.py"
 ],
 "index": {
  "arch": null,
  "build": "py_0",
  "build_number": 0,
  "depends": [
   "python"
  ],
  "license": "MIT",
  "license_family": "MIT",
  "name": "pysnooper",
  "noarch": "python",
  "platform": null,
  "subdir": "noarch",
  "timestamp": 1567978958472,
  "version": "0.2.7"
 },
 "metadata_version": 1,
 "name": "pysnooper",
 "raw_recipe": "{% set name = \"PySnooper\" %}\n{% set version = \"0.2.7\" %}\n\npackage:\n  name: \"{{ name|lower }}\"\n  version: \"{{ version }}\"\n\nsource:\n  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz\n  sha256: 035767f21744792d606a935833c283031c842e9d0013273e609cf5cf5978fca9\n\nbuild:\n  number: 0\n  noarch: python\n  script: \"{{ PYTHON }} -m pip install . --no-deps --ignore-installed -vv \"\n\nrequirements:\n  host:\n    - pip\n    - python\n  run:\n    - python\n\ntest:\n  imports:\n    - pysnooper\n\nabout:\n  home: https://github.com/cool-RR/PySnooper\n  license: MIT\n  license_family: MIT\n  license_file: LICENSE\n  summary: A poor man's debugger for Python.\n  description: |\n    PySnooper is a poor man's debugger.\n\n    You're trying to figure out why your Python code isn't doing what you think it should be doing. \n    You'd love to use a full-fledged debugger with breakpoints and watches, but you can't be bothered \n    to set one up right now.\n\n    You want to know which lines are running and which aren't, and what the values of the local variables are.\n    Most people would use print lines, in strategic locations, some of them showing the values of variables.\n\n    PySnooper lets you do the same, except instead of carefully crafting the right print lines, \n    you just add one decorator line to the function you're interested in. You'll get a play-by-play \n    log of your function, including which lines ran and when, and exactly when local variables were changed.\n\n    What makes PySnooper stand out from all other code intelligence tools? You can use it in your shitty, \n    sprawling enterprise codebase without having to do any setup. Just slap the decorator on, as shown below, \n    and redirect the output to a dedicated log file by specifying its path as the first argument.\n  doc_url: https://github.com/cool-RR/PySnooper\n  dev_url: https://github.com/cool-RR/PySnooper\n\nextra:\n  recipe-maintainers:\n    - volpatto\n",
 "rendered_recipe": {
  "about": {
   "description": "PySnooper is a poor man's debugger.\n\nYou're trying to figure out why your Python code isn't doing what you think it should be doing.\nYou'd love to use a full-fledged debugger with breakpoints and watches, but you can't be bothered\nto set one up right now.\n\nYou want to know which lines are running and which aren't, and what the values of the local variables are.\nMost people would use print lines, in strategic locations, some of them showing the values of variables.\n\nPySnooper lets you do the same, except instead of carefully crafting the right print lines,\nyou just add one decorator line to the function you're interested in. You'll get a play-by-play\nlog of your function, including which lines ran and when, and exactly when local variables were changed.\n\nWhat makes PySnooper stand out from all other code intelligence tools? You can use it in your shitty,\nsprawling enterprise codebase without having to do any setup. Just slap the decorator on, as shown below,\nand redirect the output to a dedicated log file by specifying its path as the first argument.\n",
   "dev_url": "https://github.com/cool-RR/PySnooper",
   "doc_url": "https://github.com/cool-RR/PySnooper",
   "home": "https://github.com/cool-RR/PySnooper",
   "license": "MIT",
   "license_family": "MIT",
   "license_file": "LICENSE",
   "summary": "A poor man's debugger for Python."
  },
  "build": {
   "noarch": "python",
   "number": "0",
   "script": "/home/conda/feedstock_root/build_artifacts/pysnooper_1567978732263/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_p/bin/python -m pip install . --no-deps --ignore-installed -vv ",
   "string": "py_0"
  },
  "extra": {
   "copy_test_source_files": true,
   "final": true,
   "recipe-maintainers": [
    "volpatto"
   ]
  },
  "package": {
   "name": "pysnooper",
   "version": "0.2.7"
  },
  "requirements": {
   "host": [
    "_libgcc_mutex 0.1 main",
    "ca-certificates 2019.6.16 hecc5488_0",
    "certifi 2019.6.16 py27_1",
    "libffi 3.2.1 he1b5a44_1006",
    "libgcc-ng 9.1.0 hdf63c60_0",
    "libstdcxx-ng 9.1.0 hdf63c60_0",
    "ncurses 6.1 hf484d3e_1002",
    "openssl 1.1.1c h516909a_0",
    "pip 19.2.3 py27_0",
    "python 2.7.15 h5a48372_1009",
    "readline 8.0 hf8c457e_0",
    "setuptools 41.2.0 py27_0",
    "sqlite 3.29.0 hcee41ef_1",
    "tk 8.6.9 hed695b0_1002",
    "wheel 0.33.6 py27_0",
    "zlib 1.2.11 h516909a_1005"
   ],
   "run": [
    "python"
   ]
  },
  "source": {
   "sha256": "035767f21744792d606a935833c283031c842e9d0013273e609cf5cf5978fca9",
   "url": "https://pypi.io/packages/source/P/PySnooper/PySnooper-0.2.7.tar.gz"
  },
  "test": {
   "imports": [
    "pysnooper"
   ]
  }
 },
 "version": "0.2.7"
}