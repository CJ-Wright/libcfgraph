{
 "about": {
  "channels": [
   "conda-forge",
   "defaults"
  ],
  "conda_build_version": "3.18.11",
  "conda_private": false,
  "conda_version": "4.7.12",
  "description": "Code for Anisotropies in the Microwave Background\nby Antony Lewis and Anthony Challinor\n\nFeatures:\n  - Support for closed, open and flat models\n  - Scalar, vector and tensor modes including polarization\n  - Output Cl, matter transfer functions, matter power spectrum and \u03c38\n  - Fast computation to ~0.3-0.1% accuracy, with controllable accuracy level\n  - Relatively structured and easily extendable Fortran 90 code\n  - Efficient support for massive neutrinos\n  - Absolute computations from correctly normalized initial power spectra\n  - Computation of lensed CMB power spectra and lensing potential power spectrum\n  - Internally parallelized for fast execution on multi-processor machines\n  - Use CAMB with CosmoMC for Monte-Carlo parameter estimation\n  - Constant equation of state quintessence (or variable PPF)\n  - Support for general correlated adiabatic/isocurvature initial conditions\n  - Accurate full-sky calculation of lensed power spectra (astro-ph/0502425)\n  - Integrated interface to HALOFIT for non-linear fitting\n  - support for arbitrary neutrino mass splittings\n  - For 21cm, lensing and number count power spectra see this extension\n  - For perturbed recombination and effect on small-scale baryons see this extension\n  - Calculation of local primordial and CMB lensing bispectra\n  - Easy-to-use Python wrapper\n",
  "dev_url": "https://github.com/cmbant/CAMB",
  "doc_url": "https://camb.info/readme.html",
  "env_vars": {
   "CIO_TEST": "<not set>"
  },
  "extra": {
   "copy_test_source_files": true,
   "final": true,
   "parent_recipe": {
    "name": "camb",
    "path": "/Users/runner/runners/2.160.0/work/1/s/recipe",
    "version": "1.0.10"
   },
   "recipe-maintainers": [
    "beckermr",
    "cmbant"
   ]
  },
  "home": "https://camb.info/",
  "identifiers": [],
  "keywords": [],
  "license": "modified LGPL",
  "license_family": "LGPL",
  "license_file": "/Users/runner/runners/2.160.0/work/1/s/recipe/LICENSE",
  "root_pkgs": [
   "anaconda-client 1.7.2 py_0",
   "attrs 19.3.0 py_0",
   "beautifulsoup4 4.8.1 py37_0",
   "bzip2 1.0.8 h01d97ff_1",
   "ca-certificates 2019.9.11 hecc5488_0",
   "certifi 2019.9.11 py37_0",
   "cffi 1.13.2 py37h33e799b_0",
   "chardet 3.0.4 py37_1003",
   "click 7.0 py_0",
   "clyent 1.2.2 py_1",
   "conda 4.7.12 py37_0",
   "conda-build 3.18.11 py37_0",
   "conda-env 2.6.0 1",
   "conda-forge-ci-setup 2.5.3 py37_0",
   "conda-package-handling 1.6.0 py37h01d97ff_0",
   "cryptography 2.8 py37hafa8578_0",
   "decorator 4.4.1 py_0",
   "filelock 3.0.10 py_0",
   "glob2 0.7 py_0",
   "icu 64.2 h6de7cb9_1",
   "idna 2.8 py37_1000",
   "importlib_metadata 0.23 py37_0",
   "ipython_genutils 0.2.0 py_1",
   "jinja2 2.10.3 py_0",
   "jq 1.6 h1de35cc_1000",
   "jsonschema 3.1.1 py37_0",
   "jupyter_core 4.5.0 py_0",
   "libarchive 3.3.3 h5c473cc_1006",
   "libcxx 9.0.0 h89e68fa_1",
   "libffi 3.2.1 h6de7cb9_1006",
   "libiconv 1.15 h01d97ff_1005",
   "liblief 0.9.0 h2a1bed3_1",
   "libxml2 2.9.10 h53d96d6_0",
   "lz4-c 1.8.3 h6de7cb9_1001",
   "lzo 2.10 h1de35cc_1000",
   "markupsafe 1.1.1 py37h0b31af3_0",
   "more-itertools 7.2.0 py_0",
   "nbformat 4.4.0 py_1",
   "ncurses 6.1 h0a44026_1002",
   "oniguruma 6.9.3 h01d97ff_0",
   "openssl 1.1.1d h0b31af3_0",
   "pkginfo 1.5.0.1 py_0",
   "psutil 5.6.5 py37h0b31af3_0",
   "py-lief 0.9.0 py37h6d6d4d2_1",
   "pycosat 0.6.3 py37h0b31af3_1002",
   "pycparser 2.19 py37_1",
   "pyopenssl 19.0.0 py37_0",
   "pyrsistent 0.15.5 py37h0b31af3_0",
   "pysocks 1.7.1 py37_0",
   "python 3.7.3 h93065d6_1",
   "python-dateutil 2.8.1 py_0",
   "python-libarchive-c 2.9 py37_0",
   "python.app 1.2 py37h0b31af3_1201",
   "pytz 2019.3 py_0",
   "pyyaml 5.1.2 py37h0b31af3_0",
   "readline 8.0 hcfe32e1_0",
   "requests 2.22.0 py37_1",
   "ripgrep 11.0.2 h01d97ff_3",
   "ruamel_yaml 0.15.71 py37h1de35cc_1000",
   "setuptools 41.6.0 py37_1",
   "shyaml 0.6.1 py_0",
   "six 1.13.0 py37_0",
   "soupsieve 1.9.4 py37_0",
   "sqlite 3.30.1 h93121df_0",
   "tk 8.6.9 h2573ce8_1003",
   "tqdm 4.37.0 py_0",
   "traitlets 4.3.3 py37_0",
   "urllib3 1.25.6 py37_0",
   "xz 5.2.4 h1de35cc_1001",
   "yaml 0.1.7 h1de35cc_1001",
   "zipp 0.6.0 py_0",
   "zlib 1.2.11 h0b31af3_1006",
   "zstd 1.4.0 ha9f0a20_0"
  ],
  "summary": "Code for Anisotropies in the Microwave Background",
  "tags": []
 },
 "conda_build_config": {
  "CI": "azure",
  "CONDA_BUILD_SYSROOT": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.9.sdk",
  "MACOSX_DEPLOYMENT_TARGET": "10.9",
  "c_compiler": "clang",
  "c_compiler_version": "9",
  "channel_sources": "conda-forge,defaults",
  "channel_targets": "conda-forge main",
  "cpu_optimization_target": "nocona",
  "cran_mirror": "https://cran.r-project.org",
  "cxx_compiler": "clangxx",
  "extend_keys": [
   "ignore_version",
   "ignore_build_only_deps",
   "pin_run_as_build",
   "extend_keys"
  ],
  "fortran_compiler": "gfortran",
  "fortran_compiler_version": "7",
  "ignore_build_only_deps": [
   "numpy",
   "python"
  ],
  "lua": "5",
  "macos_machine": "x86_64-apple-darwin13.4.0",
  "macos_min_version": "10.9",
  "numpy": "1.14",
  "perl": "5.26.0",
  "pin_run_as_build": {
   "python": {
    "max_pin": "x.x",
    "min_pin": "x.x"
   },
   "r-base": {
    "max_pin": "x.x",
    "min_pin": "x.x"
   }
  },
  "python": "3.6",
  "r_base": "3.5",
  "target_platform": "osx-64"
 },
 "files": [],
 "index": {
  "arch": "x86_64",
  "build": "py36_0",
  "build_number": 0,
  "depends": [
   "camb 1.0.10 py36ha91d4f2_0",
   "python >=3.6,<3.7.0a0"
  ],
  "license": "modified LGPL",
  "license_family": "LGPL",
  "name": "pycamb",
  "platform": "osx",
  "subdir": "osx-64",
  "timestamp": 1573486718272,
  "version": "1.0.10"
 },
 "metadata_version": 1,
 "name": "pycamb",
 "raw_recipe": "# This file created by conda-build 3.18.11\n# ------------------------------------------------\n\npackage:\n    name: pycamb\n    version: 1.0.10\nsource:\n    sha256: ce888ae66b168579dcd2b28302f927af6d9f7a14f84591fc943bb1462d5dfa8a\n    url: https://github.com/cmbant/CAMB/archive/1.0.10.tar.gz\nbuild:\n    noarch: false\n    number: '0'\n    string: py36_0\nrequirements:\n    host:\n        - ca-certificates 2019.9.11 hecc5488_0\n        - libcxx 9.0.0 h89e68fa_1\n        - libffi 3.2.1 h6de7cb9_1006\n        - ncurses 6.1 h0a44026_1002\n        - openssl 1.1.1d h0b31af3_0\n        - python 3.6.7 h4285619_1006\n        - readline 8.0 hcfe32e1_0\n        - sqlite 3.30.1 h93121df_0\n        - tk 8.6.9 h2573ce8_1003\n        - xz 5.2.4 h1de35cc_1001\n        - zlib 1.2.11 h0b31af3_1006\n    run:\n        - camb 1.0.10 py36ha91d4f2_0\n        - python >=3.6,<3.7.0a0\ntest:\n    imports:\n        - camb\nabout:\n    description: \"Code for Anisotropies in the Microwave Background\\nby Antony Lewis\\\n        \\ and Anthony Challinor\\n\\nFeatures:\\n  - Support for closed, open and flat\\\n        \\ models\\n  - Scalar, vector and tensor modes including polarization\\n  -\\\n        \\ Output Cl, matter transfer functions, matter power spectrum and \\u03C38\\n\\\n        \\  - Fast computation to ~0.3-0.1% accuracy, with controllable accuracy level\\n\\\n        \\  - Relatively structured and easily extendable Fortran 90 code\\n  - Efficient\\\n        \\ support for massive neutrinos\\n  - Absolute computations from correctly\\\n        \\ normalized initial power spectra\\n  - Computation of lensed CMB power spectra\\\n        \\ and lensing potential power spectrum\\n  - Internally parallelized for fast\\\n        \\ execution on multi-processor machines\\n  - Use CAMB with CosmoMC for Monte-Carlo\\\n        \\ parameter estimation\\n  - Constant equation of state quintessence (or variable\\\n        \\ PPF)\\n  - Support for general correlated adiabatic/isocurvature initial\\\n        \\ conditions\\n  - Accurate full-sky calculation of lensed power spectra (astro-ph/0502425)\\n\\\n        \\  - Integrated interface to HALOFIT for non-linear fitting\\n  - support for\\\n        \\ arbitrary neutrino mass splittings\\n  - For 21cm, lensing and number count\\\n        \\ power spectra see this extension\\n  - For perturbed recombination and effect\\\n        \\ on small-scale baryons see this extension\\n  - Calculation of local primordial\\\n        \\ and CMB lensing bispectra\\n  - Easy-to-use Python wrapper\\n\"\n    dev_url: https://github.com/cmbant/CAMB\n    doc_url: https://camb.info/readme.html\n    home: https://camb.info/\n    license: modified LGPL\n    license_family: LGPL\n    license_file: /Users/runner/runners/2.160.0/work/1/s/recipe/LICENSE\n    summary: Code for Anisotropies in the Microwave Background\nextra:\n    copy_test_source_files: true\n    final: true\n    recipe-maintainers:\n        - beckermr\n        - cmbant\n",
 "rendered_recipe": {
  "about": {
   "description": "Code for Anisotropies in the Microwave Background\nby Antony Lewis and Anthony Challinor\n\nFeatures:\n  - Support for closed, open and flat models\n  - Scalar, vector and tensor modes including polarization\n  - Output Cl, matter transfer functions, matter power spectrum and \u03c38\n  - Fast computation to ~0.3-0.1% accuracy, with controllable accuracy level\n  - Relatively structured and easily extendable Fortran 90 code\n  - Efficient support for massive neutrinos\n  - Absolute computations from correctly normalized initial power spectra\n  - Computation of lensed CMB power spectra and lensing potential power spectrum\n  - Internally parallelized for fast execution on multi-processor machines\n  - Use CAMB with CosmoMC for Monte-Carlo parameter estimation\n  - Constant equation of state quintessence (or variable PPF)\n  - Support for general correlated adiabatic/isocurvature initial conditions\n  - Accurate full-sky calculation of lensed power spectra (astro-ph/0502425)\n  - Integrated interface to HALOFIT for non-linear fitting\n  - support for arbitrary neutrino mass splittings\n  - For 21cm, lensing and number count power spectra see this extension\n  - For perturbed recombination and effect on small-scale baryons see this extension\n  - Calculation of local primordial and CMB lensing bispectra\n  - Easy-to-use Python wrapper\n",
   "dev_url": "https://github.com/cmbant/CAMB",
   "doc_url": "https://camb.info/readme.html",
   "home": "https://camb.info/",
   "license": "modified LGPL",
   "license_family": "LGPL",
   "license_file": "/Users/runner/runners/2.160.0/work/1/s/recipe/LICENSE",
   "summary": "Code for Anisotropies in the Microwave Background"
  },
  "build": {
   "noarch": false,
   "number": "0",
   "string": "py36_0"
  },
  "extra": {
   "copy_test_source_files": true,
   "final": true,
   "recipe-maintainers": [
    "beckermr",
    "cmbant"
   ]
  },
  "package": {
   "name": "pycamb",
   "version": "1.0.10"
  },
  "requirements": {
   "host": [
    "ca-certificates 2019.9.11 hecc5488_0",
    "libcxx 9.0.0 h89e68fa_1",
    "libffi 3.2.1 h6de7cb9_1006",
    "ncurses 6.1 h0a44026_1002",
    "openssl 1.1.1d h0b31af3_0",
    "python 3.6.7 h4285619_1006",
    "readline 8.0 hcfe32e1_0",
    "sqlite 3.30.1 h93121df_0",
    "tk 8.6.9 h2573ce8_1003",
    "xz 5.2.4 h1de35cc_1001",
    "zlib 1.2.11 h0b31af3_1006"
   ],
   "run": [
    "camb 1.0.10 py36ha91d4f2_0",
    "python >=3.6,<3.7.0a0"
   ]
  },
  "source": {
   "sha256": "ce888ae66b168579dcd2b28302f927af6d9f7a14f84591fc943bb1462d5dfa8a",
   "url": "https://github.com/cmbant/CAMB/archive/1.0.10.tar.gz"
  },
  "test": {
   "imports": [
    "camb"
   ]
  }
 },
 "version": "1.0.10"
}